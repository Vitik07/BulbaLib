﻿@{
    ViewData["Title"] = "Каталог новелл";
    Layout = null;
}
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="utf-8" />
    <title>Каталог новелл — BulbaLib</title>
    <link rel="stylesheet" href="~/css/Catalog.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
</head>
<body>
    <div class="novel-header-bar">
        <div class="header-logo-btn" onclick="window.location.href='/'" role="button" tabindex="0" aria-label="К главной">
            <img src="/favicon.ico" alt="logo" />
            <span class="header-logo-text">BulbaLib</span>
        </div>
    </div>
    <main>
        <div class="catalog-main-bg">
            <div class="catalog-main-container">
                <h1 class="catalog-title">Каталог новелл</h1>

                @if (ViewData["CanAddNewNovel"] != null && (bool)ViewData["CanAddNewNovel"])
                {
                    <div class="text-end mb-3"> @* Align button to the right, add margin *
                        <a asp-controller="Novels" asp-action="Create" class="btn btn-primary">Добавить новеллу (+)</a>
                    </div>
                }

                <div class="catalog-filters">
                    <input id="searchInput" type="text" placeholder="Поиск по названию..." />
                    <select id="sortSelect">
                        <option value="title_asc">Название (А-Я)</option>
                        <option value="title_desc">Название (Я-А)</option>
                    </select>
                    <select id="genreSelect">
                        <option value="">Все жанры</option>
                    </select>
                    <select id="tagSelect">
                        <option value="">Все теги</option>
                    </select>
                </div>
                <div class="novel-list-outer">
                    <div class="novel-list" id="novelList"></div>
                </div>
            </div>
        </div>
    </main>
    <script>
        const baseUrl = window.location.origin;

        function calculateSearchScore(novelTitle, term) {
            novelTitle = novelTitle.toLowerCase();
            term = term.toLowerCase();

            let scores = {
                totalScore: 0,
                exactMatchBonus: 0,
                startWordBonus: 0,
                sequentialBonus: 0,
                charCountBonus: 0
            };

            // A. Bonus for full substring match of term
            const idx = novelTitle.indexOf(term);
            if (idx !== -1) {
                scores.exactMatchBonus = 10000 / (1 + idx);
            }

            // B. Bonus for term matching the start of a word in novelTitle
            // const words = novelTitle.split(/[\s-_:,.]+/); // Original split
            const words = novelTitle.split(/[\s-_]+/); // Split by space, hyphen, underscore as per new req
            for (const word of words) {
                if (word.startsWith(term)) {
                    scores.startWordBonus += 5000; // Accumulate if multiple words start with term
                }
            }

            // C. Bonus for sequential character matching of term in novelTitle
            let maxSequentialScore = 0;
            if (term.length > 0) { // Ensure term is not empty
                for (let i = 0; i < novelTitle.length; i++) {
                    let currentSequentialScore = 0;
                    let termCharIndex = 0;
                    let continuityBonus = 1.0;
                    // Iterate from current position i in novelTitle
                    for (let j = i; j < novelTitle.length && termCharIndex < term.length; j++) {
                        if (novelTitle[j] === term[termCharIndex]) {
                            let charScore = (100 + (termCharIndex * 50)) / (1 + j); // j is the title index
                            currentSequentialScore += charScore * continuityBonus;
                            continuityBonus *= 1.5;
                            termCharIndex++;
                        }
                    }
                    // Only count if at least one character of the term was matched sequentially
                    if (termCharIndex > 0) {
                        maxSequentialScore = Math.max(maxSequentialScore, currentSequentialScore);
                    }
                }
            }
            scores.sequentialBonus = maxSequentialScore;

            // D. Bonus for count of unique term characters found in novelTitle
            const uniqueTermChars = new Set(term.split(''));
            let foundCharsBonus = 0;
            if (term.length > 0) { // Ensure term is not empty for uniqueTermChars
                for (const char of uniqueTermChars) {
                    if (char === '') continue; // Skip empty char if term was e.g. ' '
                    // const occurrences = novelTitle.split(char).length - 1; // Alternative way to count
                    let occurrences = 0;
                    for (let k = 0; k < novelTitle.length; k++) {
                        if (novelTitle[k] === char) {
                            occurrences++;
                        }
                    }
                    foundCharsBonus += occurrences * 3; // Small bonus per occurrence
                }
            }
            scores.charCountBonus = foundCharsBonus;

            // Calculate total score
            scores.totalScore = scores.exactMatchBonus + scores.startWordBonus + scores.sequentialBonus + scores.charCountBonus;

            return scores;
        }

        async function loadGenres() {
            const res = await fetch(`${baseUrl}/api/catalog/genres`);
            const genres = await res.json();
            const genreSelect = document.getElementById('genreSelect');
            genreSelect.innerHTML = `<option value="">Все жанры</option>`;
            genres.forEach(g => {
                genreSelect.innerHTML += `<option value="${g}">${g}</option>`;
            });
        }
        async function loadTags() {
            const res = await fetch(`${baseUrl}/api/catalog/tags`);
            const tags = await res.json();
            const tagSelect = document.getElementById('tagSelect');
            tagSelect.innerHTML = `<option value="">Все теги</option>`;
            tags.forEach(t => {
                tagSelect.innerHTML += `<option value="${t}">${t}</option>`;
            });
        }

        async function loadCatalog() {
            const params = new URLSearchParams();
            // Do NOT append search term for server request
            params.append("sort", document.getElementById('sortSelect').value);
            if (document.getElementById('genreSelect').value)
                params.append("genre", document.getElementById('genreSelect').value);
            if (document.getElementById('tagSelect').value)
                params.append("tag", document.getElementById('tagSelect').value);

            const res = await fetch(`${baseUrl}/api/catalog?${params.toString()}`);
            const novelsFromServer = await res.json(); // Renamed for clarity

            const searchTerm = document.getElementById('searchInput').value.trim().toLowerCase();
            let novelsToRender = novelsFromServer;

            if (searchTerm) { // Check if searchTerm is not empty
                const novelScores = novelsFromServer.map(novel => ({
                    novel: novel,
                    scores: calculateSearchScore(novel.title, searchTerm)
                }));

                let relevantNovels = novelScores.filter(item => item.scores.totalScore > 0);

                const maxTotalScore = relevantNovels.length > 0 ? Math.max(...relevantNovels.map(item => item.scores.totalScore)) : 0;

                const strongMatches = relevantNovels.filter(item => item.scores.exactMatchBonus > 0 || item.scores.startWordBonus > 0);

                let finalFilteredNovelScores;
                if (strongMatches.length > 0) {
                    finalFilteredNovelScores = strongMatches;
                } else {
                    if (maxTotalScore > 0 && relevantNovels.length > 0) {
                        finalFilteredNovelScores = relevantNovels.filter(item => item.scores.totalScore >= maxTotalScore * 0.40);
                    } else {
                        finalFilteredNovelScores = [];
                    }
                }

                const sortedScoredNovels = finalFilteredNovelScores.sort((a, b) => b.scores.totalScore - a.scores.totalScore);

                novelsToRender = sortedScoredNovels.map(item => item.novel);
            }
            // Else: novelsToRender remains novelsFromServer (already sorted by server if applicable)

            renderNovels(novelsToRender);
        }

        function getLastCover(novel) {
            if (Array.isArray(novel.covers) && novel.covers.length)
                return novel.covers[novel.covers.length - 1];
            return '/img/no-cover.png';
        }

        function renderNovels(novels) {
            const list = document.getElementById('novelList');
            list.innerHTML = '';
            if (!novels.length) {
                list.innerHTML = '<div class="novel-empty">Новеллы не найдены</div>';
                return;
            }
            novels.forEach(novel => {
                const card = document.createElement('div');
                card.className = 'novel-card';
                card.onclick = () => window.location.href = `/novel/${novel.id}`;
                card.innerHTML = `
                                    <div class="novel-cover-wrap">
                                        <img class="novel-cover" src="${getLastCover(novel)}" alt="${novel.title}">
                                    </div>
                                    <div class="novel-info">
                                        <div class="novel-title" title="${novel.title}">${novel.title}</div>
                                        <div class="novel-meta">
                                            ${(novel.releaseYear ? `<span class="novel-meta-item"><i class="fa-solid fa-calendar"></i> ${novel.releaseYear}</span>` : '')}
                                            ${(novel.type ? `<span class="novel-meta-item"><i class="fa-solid fa-book"></i> ${novel.type}</span>` : '')}
                                            ${(novel.format ? `<span class="novel-meta-item"><i class="fa-solid fa-file-lines"></i> ${novel.format}</span>` : '')}
                                        </div>
                                    </div>
                                `;
                list.appendChild(card);
            });
        }

        document.addEventListener('DOMContentLoaded', () => {
            loadGenres();
            loadTags();
            loadCatalog();

            document.getElementById('searchInput').addEventListener('input', () => loadCatalog());
            document.getElementById('sortSelect').addEventListener('change', () => loadCatalog());
            document.getElementById('genreSelect').addEventListener('change', () => loadCatalog());
            document.getElementById('tagSelect').addEventListener('change', () => loadCatalog());
        });
    </script>
</body>
</html>