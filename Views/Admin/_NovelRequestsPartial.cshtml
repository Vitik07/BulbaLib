@model List<NovelModerationRequestViewModel>
@{
    // Partial view, no layout



    var currentPage = ViewData["CurrentPage"] as int? ?? 1;



    var totalPages = ViewData["TotalPages"] as int? ?? 1;



    var pageSize = ViewData["PageSize"] as int? ?? 10;
}

<div class="table-responsive">
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>ID Запроса</th>
                <th>Тип</th>
                <th>ID Новеллы</th>
                <th>Название новеллы</th>
                <th>Запросил</th>
                <th>Дата</th>
                <th>Статус</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @if (Model == null || !Model.Any())
            {
                    <tr>
                        <td colspan="8" class="text-center">Нет ожидающих запросов на модерацию новелл.</td>
                    </tr>
            }
            else
            {

                foreach (var req in Model)

                {
                            <tr>
                                <td>@req.RequestId</td>
                                <td>@req.RequestTypeFriendlyName</td>
                                <td>@(req.NovelId.HasValue ? req.NovelId.Value.ToString() : "N/A")</td>
                                <td>
                            @if (req.RequestType == ModerationRequestType.AddNovel)

                            {
                                @(req.ProposedNovelData?.Title ?? req.NovelTitle ?? "Новая новелла")
                            }

                            else

                            {
                                @(req.NovelTitle ?? "N/A")
                            }
                                </td>
                                <td>@req.RequesterLogin</td>
                                <td>@req.CreatedAt.ToString("g")</td>
                                <td><span class="badge bg-warning text-dark">@req.Status</span></td>
                                <td>
                                    <a href="@Url.Action("NovelRequestDetails", "Admin", new { requestId = req.RequestId })" class="btn btn-sm btn-info">Детали</a>
                                </td>
                            </tr>
                }
            }
        </tbody>
    </table>
</div>

@if (totalPages > 1)



{
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center">
            @if (currentPage > 1)



            {
                        <li class="page-item">
                            <a class="page-link novel-request-page-link" href="#" data-page="@(currentPage - 1)" data-url="@Url.Action("NovelRequestsPartial", "Admin", new { page = currentPage - 1, pageSize = pageSize })">Предыдущая</a>
                        </li>
            }



            else



            {
                        <li class="page-item disabled">
                            <span class="page-link">Предыдущая</span>
                        </li>
            }

            @for (int i = 1; i <= totalPages; i++)



            {
                        <li class="page-item @(i == currentPage ? "active" : "")">
                    @if (i == currentPage)

                    {
                                    <span class="page-link">@i <span class="sr-only">(current)</span></span>
                    }

                    else

                    {
                                    <a class="page-link novel-request-page-link" href="#" data-page="@i" data-url="@Url.Action("NovelRequestsPartial", "Admin", new { page = i, pageSize = pageSize })">@i</a>
                    }
                        </li>
            }

            @if (currentPage < totalPages)



            {
                        <li class="page-item">
                            <a class="page-link novel-request-page-link" href="#" data-page="@(currentPage + 1)" data-url="@Url.Action("NovelRequestsPartial", "Admin", new { page = currentPage + 1, pageSize = pageSize })">Следующая</a>
                        </li>
            }



            else



            {
                        <li class="page-item disabled">
                            <span class="page-link">Следующая</span>
                        </li>
            }
            </ul>
        </nav>
}

<script>
    // This script needs to be executed after this partial view is loaded into the DOM.
    // The main Index.cshtml's AJAX loader for tabs should handle re-attaching or this script block will run upon .load().
    // Using event delegation from a static parent (#novel-requests-content-area) is more robust if issues occur.
    $('#novel-requests-content-area').off('click.novelreqpage').on('click.novelreqpage', '.novel-request-page-link', function (e) {
        e.preventDefault();
        var url = $(this).data('url');
        $('#novel-requests-content-area').load(url, function (response, status, xhr) {
            if (status == "error") {
                $(this).html("<p>Ошибка загрузки данных: " + xhr.status + " " + xhr.statusText + "</p>");
            }
        });
    });
</script>
