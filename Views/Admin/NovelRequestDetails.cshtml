@model BulbaLib.Models.ModerationRequest
@{
    ViewData["Title"] = $"Детали запроса ID: {Model.Id}";

    Layout = "~/Views/Shared/_Layout.cshtml";

    var requestedNovel = ViewData["RequestedNovel"] as Novel;

    var existingNovel = ViewData["ExistingNovel"] as Novel;

    var requester = ViewData["RequesterUser"] as User;
}

<h1>@ViewData["Title"]</h1>
<hr />

<div class="row">
    <div class="col-md-6">
        <h4>Информация о запросе</h4>
        <dl class="row">
            <dt class="col-sm-4">ID Запроса:</dt>
            <dd class="col-sm-8">@Model.Id</dd>
            <dt class="col-sm-4">Тип:</dt>
            <dd class="col-sm-8">@Model.RequestType</dd>
            <dt class="col-sm-4">Пользователь:</dt>
            <dd class="col-sm-8">@(requester?.Login ?? Model.UserId.ToString()) (ID: @Model.UserId)</dd>
            <dt class="col-sm-4">Дата запроса:</dt>
            <dd class="col-sm-8">@Model.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")</dd>
            @if (Model.NovelId.HasValue)
            {
                <dt class="col-sm-4">Novel ID:</dt>
                <dd class="col-sm-8">@Model.NovelId.Value</dd>
            }
            <dt class="col-sm-4">Статус:</dt>
            <dd class="col-sm-8">@Model.Status</dd>
        </dl>
    </div>
</div>

@if (Model.RequestType == ModerationRequestType.AddNovel && requestedNovel != null)

{
    <h4>Предлагаемая новая новелла:</h4>
    <partial name="_NovelDisplayPartial" model="requestedNovel" />
}

else if (Model.RequestType == ModerationRequestType.EditNovel)

{
    <div class="row mt-4">
        @if (existingNovel != null)

        {
            <div class="col-md-6">
                <h4>Существующая новелла (ID: @existingNovel.Id):</h4>
                <partial name="_NovelDisplayPartial" model="existingNovel" />
            </div>
        }
        @if (requestedNovel != null) // This contains the proposed changes mapped to a Novel object

        {
            <div class="col-md-6">
                <h4>Предлагаемые изменения:</h4>
                <partial name="_NovelDisplayPartial" model="requestedNovel" />
            </div>
        }

        else if (!string.IsNullOrEmpty(Model.RequestData))

        {
            <div class="col-md-6">
                <h4>JSON с изменениями:</h4>
                <pre style="max-height: 400px; overflow:auto; border:1px solid #ccc; padding:10px;">@Model.RequestData</pre>
            </div>
        }
    </div>
}

else if (Model.RequestType == ModerationRequestType.DeleteNovel && existingNovel != null)

{
    <h4>Новелла к удалению:</h4>
    <partial name="_NovelDisplayPartial" model="existingNovel" />
}

@if (Model.Status == ModerationStatus.Pending)

{
    <div class="mt-4">
        <h4>Обработка запроса:</h4>
        <form id="processNovelRequestForm" method="post">
            @Html.AntiForgeryToken()
            <input type="hidden" name="requestId" value="@Model.Id" />
            <div class="form-group mb-3">
                <label for="moderationCommentNovel" class="form-label">Комментарий модератора (причина отклонения, если есть):</label>
                <textarea id="moderationCommentNovel" name="moderationComment" class="form-control" rows="3"></textarea>
            </div>
            <div class="form-group">
                <button type="button" class="btn btn-success btn-process-novel-request" data-approve="true"><i class="fas fa-check"></i> Одобрить</button>
                <button type="button" class="btn btn-danger btn-process-novel-request" data-approve="false"><i class="fas fa-times"></i> Отклонить</button>
                <a href="@Url.Action("Index", "Admin")#novel-requests-tab" class="btn btn-secondary">Назад к списку</a>
            </div>
        </form>
    </div>
}

else

{
    <div class="mt-4 alert alert-info">
        <p><strong>Модератор:</strong> @(ViewData["ModeratorUserLogin"]?.ToString() ?? (Model.ModeratorId.HasValue ? Model.ModeratorId.Value.ToString() : "N/A"))</p>
        <p><strong>Дата обработки:</strong> @Model.UpdatedAt.ToString("yyyy-MM-dd HH:mm:ss")</p>
        @if (!string.IsNullOrEmpty(Model.ModerationComment))

        {
            <p><strong>Комментарий модератора:</strong> @Model.ModerationComment</p>
        }
        <a href="@Url.Action("Index", "Admin")#novel-requests-tab" class="btn btn-outline-secondary mt-2">Назад к списку запросов</a>
    </div>
}

<div class="mt-3">
    @if (Model.Status != ModerationStatus.Pending) // Show this link only if already processed

    {
        <a href="@Url.Action("Index", "Admin")#novel-requests-tab" class="btn btn-outline-secondary">Назад к списку запросов</a>
    }
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            $('.btn-process-novel-request').click(function () {
                var approve = $(this).data('approve') === true;
                var requestId = $('#processNovelRequestForm input[name="requestId"]').val();
                var moderationComment = $('#moderationCommentNovel').val();
                var token = $('#processNovelRequestForm input[name="__RequestVerificationToken"]').val();
                var button = $(this);
                var originalButtonText = button.text();

                // Disable both buttons
                $('.btn-process-novel-request').prop('disabled', true).text('Обработка...');

                $.ajax({
                    url: '@Url.Action("ProcessNovelRequest", "Admin")',
                    type: 'POST',
                    data: {
                        __RequestVerificationToken: token,
                        requestId: requestId,
                        approve: approve,
                        moderationComment: moderationComment
                    },
                    success: function (response) {
                        if (response.success) {
                            alert(response.message);
                            window.location.href = '@Url.Action("Index", "Admin")#novel-requests-tab';
                        } else {
                            alert('Ошибка: ' + response.message);
                            // Re-enable buttons on error
                            $('.btn-process-novel-request').prop('disabled', false);
                            // Restore specific button text if needed, or a generic one
                            button.text(originalButtonText);
                            if (approve) { $('.btn-process-novel-request[data-approve="false"]').text('Отклонить'); }
                            else { $('.btn-process-novel-request[data-approve="true"]').text('Одобрить'); }
                        }
                    },
                    error: function (xhr) {
                        alert('Произошла ошибка: ' + (xhr.responseJSON ? xhr.responseJSON.message : 'Неизвестная ошибка.'));
                        $('.btn-process-novel-request').prop('disabled', false);
                        button.text(originalButtonText);
                        if (approve) { $('.btn-process-novel-request[data-approve="false"]').text('Отклонить'); }
                        else { $('.btn-process-novel-request[data-approve="true"]').text('Одобрить'); }
                    }
                });
            });
        });
    </script>
}
