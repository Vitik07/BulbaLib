@model BulbaLib.Models.ChapterModerationRequestViewModel
@{
    ViewData["Title"] = $"Детали запроса главы: {Model.RequestTypeFriendlyName} ID {Model.RequestId}";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>@ViewData["Title"]</h1>
<hr />

<div class="row">
    <div class="col-md-7">
        <h4>Информация о запросе</h4>
        <dl class="row">
            <dt class="col-sm-4">ID Запроса:</dt>
            <dd class="col-sm-8">@Model.RequestId</dd>
            <dt class="col-sm-4">Тип:</dt>
            <dd class="col-sm-8">@Model.RequestTypeFriendlyName</dd>
            <dt class="col-sm-4">Пользователь:</dt>
            <dd class="col-sm-8">@Model.RequesterLogin (ID: @Model.UserId)</dd>
            <dt class="col-sm-4">Дата запроса:</dt>
            <dd class="col-sm-8">@Model.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")</dd>
            @if (Model.NovelId.HasValue)
            {
                <dt class="col-sm-4">Новелла:</dt>
                <dd class="col-sm-8"><a asp-controller="NovelView" asp-action="Details" asp-route-id="@Model.NovelId.Value" target="_blank">@Model.NovelTitle (ID: @Model.NovelId.Value)</a></dd>
            }
            @if (Model.ChapterId.HasValue && Model.RequestType != ModerationRequestType.AddChapter)
            {
                <dt class="col-sm-4">ID Главы (существующей):</dt>
                <dd class="col-sm-8">@Model.ChapterId.Value</dd>
            }
            <dt class="col-sm-4">Номер Главы (предлагаемый/существующий):</dt>
            <dd class="col-sm-8">@Model.ChapterNumber</dd>
            <dt class="col-sm-4">Название Главы (предлагаемое/существующее):</dt>
            <dd class="col-sm-8">@Model.ChapterTitle</dd>
            <dt class="col-sm-4">Статус Запроса:</dt>
            <dd class="col-sm-8">@Model.Status</dd>
        </dl>
    </div>
</div>

@if (Model.RequestType == ModerationRequestType.AddChapter && Model.ProposedChapterData != null)
{
    <h4 class="mt-4">Предлагаемая новая глава:</h4>
    <partial name="_ChapterDisplayPartial" model="Model.ProposedChapterData" />
}
else if (Model.RequestType == ModerationRequestType.EditChapter)
{
    <div class="row mt-4">
        @if (Model.ExistingChapterData != null)
        {
            <div class="col-md-6">
                <h4>Существующая глава (ID: @Model.ExistingChapterData.Id):</h4>
                @{ 
                    Model.ExistingChapterData.Content = Model.ExistingContent; 
                }
                <partial name="_ChapterDisplayPartial" model="Model.ExistingChapterData" />
            </div>
        }
        @if (Model.ProposedChapterData != null)
        {
            <div class="col-md-6">
                <h4>Предлагаемые изменения:</h4>
                @{ 
                    Model.ProposedChapterData.Content = Model.ProposedContent; 
                }
                <partial name="_ChapterDisplayPartial" model="Model.ProposedChapterData" />
            </div>
        }
    </div>
}
else if (Model.RequestType == ModerationRequestType.DeleteChapter && Model.ExistingChapterData != null)
{
    <h4 class="mt-4">Глава к удалению:</h4>
    @{ 
        Model.ExistingChapterData.Content = Model.ExistingContent; 
    }
    <partial name="_ChapterDisplayPartial" model="Model.ExistingChapterData" />
}
else if (!string.IsNullOrEmpty(Model.RequestDataJson) && Model.ProposedChapterData == null && Model.ExistingChapterData == null)
{
    <h4 class="mt-4">JSON данные запроса:</h4>
    <pre class="border p-2"><code>@Model.RequestDataJson</code></pre>
}


@if (Model.Status == ModerationStatus.Pending.ToString())
{
    <div class="mt-4">
        <h4>Обработка запроса:</h4>
        <form id="processChapterRequestForm" method="post">
            @Html.AntiForgeryToken()
            <input type="hidden" name="requestId" value="@Model.RequestId" />
            <div class="form-group mb-3">
                <label for="moderationCommentChapter" class="form-label">Комментарий модератора (причина отклонения, если есть):</label>
                <textarea class="form-control" id="moderationCommentChapter" name="moderationComment" rows="3"></textarea>
            </div>
            <div class="form-group">
                <button type="button" class="btn btn-success btn-process-chapter-request" data-approve="true"><i class="fas fa-check"></i> Одобрить</button>
                <button type="button" class="btn btn-danger btn-process-chapter-request" data-approve="false"><i class="fas fa-times"></i> Отклонить</button>
                <a href="@Url.Action("Index", "Admin")#chapter-requests-tab" class="btn btn-secondary">Назад к списку</a>
            </div>
        </form>
    </div>
}
else
{
    @{
        string? modComment = Model.ModerationComment; // Directly access from Model
        DateTime? updatedAt = Model.UpdatedAt; // Directly access from Model
        // ModeratorLogin is expected to be in ViewData, set by the controller.
        string moderatorLogin = ViewData["ModeratorUserLogin"]?.ToString() ?? "N/A"; 
    }
    <div class="mt-4 alert alert-info">
        <p><strong>Модератор:</strong> @moderatorLogin</p>
        <p><strong>Дата обработки:</strong> @(updatedAt.HasValue ? updatedAt.Value.ToString("yyyy-MM-dd HH:mm:ss") : "N/A")</p>
        @if (!string.IsNullOrEmpty(modComment))
        {
            <p><strong>Комментарий модератора:</strong> @modComment</p>
        }
        <a href="@Url.Action("Index", "Admin")#chapter-requests-tab" class="btn btn-outline-secondary mt-2">Назад к списку запросов</a>
    </div>
}

@section Scripts {
    <script>
    $(document).ready(function () {
        $('.btn-process-chapter-request').click(function () {
            var approve = $(this).data('approve') === true;
            var requestId = $('#processChapterRequestForm input[name="requestId"]').val();
            var moderationComment = $('#moderationCommentChapter').val();
            var token = $('#processChapterRequestForm input[name="__RequestVerificationToken"]').val();
            var button = $(this);
            // var originalButtonText = button.text(); // Not used currently
            
            $('.btn-process-chapter-request').prop('disabled', true).text('Обработка...');

            var actionUrl = approve ? '@Url.Action("ApproveChapterRequest", "Admin")' : '@Url.Action("RejectChapterRequest", "Admin")';
            
            var postData = {
                __RequestVerificationToken: token,
                requestId: requestId,
                moderationComment: moderationComment
            };

            $.ajax({
                url: actionUrl,
                type: 'POST',
                data: postData,
                success: function (response) {
                    if (response.success) {
                        alert(response.message);
                        window.location.href = '@Url.Action("Index", "Admin")#chapter-requests-tab';
                    } else {
                        alert('Ошибка: ' + response.message);
                        $('.btn-process-chapter-request').prop('disabled', false);
                        $('.btn-process-chapter-request[data-approve="true"]').text('Одобрить');
                        $('.btn-process-chapter-request[data-approve="false"]').text('Отклонить');
                    }
                },
                error: function (xhr) {
                    alert('Произошла ошибка: ' + (xhr.responseJSON ? xhr.responseJSON.message : 'Неизвестная ошибка.'));
                    $('.btn-process-chapter-request').prop('disabled', false);
                    $('.btn-process-chapter-request[data-approve="true"]').text('Одобрить');
                    $('.btn-process-chapter-request[data-approve="false"]').text('Отклонить');
                }
            });
        });
    });
    </script>
}
