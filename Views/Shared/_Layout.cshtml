﻿﻿﻿
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - BulbaLib</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/BulbaLib.styles.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">BulbaLib</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
                        </li>
                    </ul>
                </div>
                <div class="navbar-collapse collapse d-sm-inline-flex">
                    <ul class="navbar-nav">
                        @if (User.Identity.IsAuthenticated)

                        {
                            <li class="nav-item me-2">
                                <a class="nav-link text-dark no-underline" asp-controller="Notifications" asp-action="Index" id="notificationLink">
                                    🔔 <span class="badge bg-danger" id="notification-unread-count" style="display:none; vertical-align: top;">0</span>
                                </a>
                            </li>
                            <li class="nav-item me-2">
                                <a class="nav-link text-dark no-underline" asp-controller="ProfileView" asp-action="Profile">
                                    <img src="/Resource/default-avatar.jpg" alt="User Avatar" class="main-menu-avatar" />
                                </a>
                            </li>
                            <li class="nav-item ms-1 me-2">
                                <!-- Added me-2 for spacing from potential next items -->
                                <button class="nav-link text-dark no-underline btn btn-link" id="profilePanelToggle" aria-label="Toggle profile panel">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-three-dots-vertical" viewBox="0 0 16 16">
                                        <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
                                    </svg>
                                </button>
                            </li>
                            @* The Admin link will be moved into the panel *@
                            @* <li class="nav-item">
                        <a class="nav-link text-dark" asp-controller="Admin" asp-action="Index">Админ</a>
                        </li> *@
                            <li class="nav-item">
                                <form asp-controller="Auth" asp-action="Logout" method="post" class="form-inline">
                                    <button type="submit" class="nav-link btn btn-link text-dark no-underline">Выход</button>
                                </form>
                            </li>
                        }

                        else



                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-controller="AuthView" asp-action="Login">Вход</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-controller="AuthView" asp-action="Register">Регистрация</a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2025 - BulbaLib - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

    <!-- Profile Panel/Modal HTML -->
    @if (User.Identity.IsAuthenticated)

    {
        <div class="profile-panel-overlay" id="profilePanelOverlay" style="display: none;"></div>
        <div class="profile-panel" id="profilePanelContainer" style="display: none;">
            <button class="profile-panel-close" id="profilePanelClose" aria-label="Close profile panel">&times;</button>
            <nav class="profile-panel-nav">
                <a asp-controller="CatalogView" asp-action="Catalog" class="profile-panel-link">Каталог</a>
                @if (User.IsInRole("Admin") || User.IsInRole("Moderator")) // Check roles for Admin Panel link

                {
                    <a asp-controller="Admin" asp-action="Index" class="profile-panel-link">Админ панель</a>
                }
                @* Add other links here if needed *@
            </nav>
        </div>

        <script>
            window.updateNotificationCount = function () {
                $.get('@Url.Action("GetUnreadCount", "Notifications", new { area = "" })', function (data) {
                    var countBadge = $('#notification-unread-count');
                    if (data.count > 0) {
                        countBadge.text(data.count).show();
                    } else {
                        countBadge.hide();
                    }
                });
            }

            $(document).ready(function () {
                window.updateNotificationCount(); // Initial load
                // Optionally, set an interval to periodically update the count
                // setInterval(window.updateNotificationCount, 60000); // Every 60 seconds
            });

            // Profile Panel Toggle Logic
            const profilePanelToggle = document.getElementById('profilePanelToggle');
            const profilePanelContainer = document.getElementById('profilePanelContainer');
            const profilePanelOverlay = document.getElementById('profilePanelOverlay');
            const profilePanelClose = document.getElementById('profilePanelClose');

            if (profilePanelToggle && profilePanelContainer && profilePanelOverlay && profilePanelClose) {
                profilePanelToggle.addEventListener('click', function () {
                    const isOpen = profilePanelContainer.classList.contains('open');
                    if (isOpen) {
                        profilePanelContainer.classList.remove('open');
                        profilePanelOverlay.style.display = 'none';
                        // Delay hiding to allow animation
                        setTimeout(() => {
                            if (!profilePanelContainer.classList.contains('open')) { // Check again in case it was quickly reopened
                                profilePanelContainer.style.display = 'none';
                            }
                        }, 300); // Match CSS transition time
                    } else {
                        profilePanelContainer.style.display = 'flex'; // Set display before adding class to animate
                        profilePanelOverlay.style.display = 'block';
                        // Force reflow to ensure display:flex is applied before class for transition
                        void profilePanelContainer.offsetWidth;
                        profilePanelContainer.classList.add('open');
                    }
                });

                profilePanelClose.addEventListener('click', function () {
                    profilePanelContainer.classList.remove('open');
                    profilePanelOverlay.style.display = 'none';
                    setTimeout(() => {
                        if (!profilePanelContainer.classList.contains('open')) {
                            profilePanelContainer.style.display = 'none';
                        }
                    }, 300);
                });

                profilePanelOverlay.addEventListener('click', function () {
                    profilePanelContainer.classList.remove('open');
                    profilePanelOverlay.style.display = 'none';
                    setTimeout(() => {
                        if (!profilePanelContainer.classList.contains('open')) {
                            profilePanelContainer.style.display = 'none';
                        }
                    }, 300);
                });
            }
        </script>
    }

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
