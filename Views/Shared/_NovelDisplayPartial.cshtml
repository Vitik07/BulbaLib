@model BulbaLib.Models.Novel
@using Newtonsoft.Json; // Assuming Newtonsoft.Json is available

@if (Model != null)
{
    <dl class="row">
        <dt class="col-sm-3">ID Новеллы:</dt>
        <dd class="col-sm-9">@Model.Id</dd>

        <dt class="col-sm-3">Название:</dt>
        <dd class="col-sm-9">@Model.Title</dd>

        <dt class="col-sm-3">Описание:</dt>
        <dd class="col-sm-9">
            <div style="max-height: 200px; overflow-y: auto; border: 1px solid #eee; padding: 5px; white-space: pre-wrap;">
                @Model.Description
            </div>
        </dd>

        <dt class="col-sm-3">Обложки:</dt>
        <dd class="col-sm-9">
            @if (!string.IsNullOrEmpty(Model.Covers))
            {
                try
                {
                    var coversList = JsonConvert.DeserializeObject<List<string>>(Model.Covers);
                    if (coversList != null && coversList.Any())
                    {
                        foreach (var coverUrl in coversList)
                        {
                            <div style="margin-bottom: 5px;">
                                <a href="@coverUrl" target="_blank">@coverUrl</a>
                                <br />
                                <img src="@coverUrl" alt="Обложка" style="max-width: 100px; max-height: 150px; margin-top: 2px; border: 1px solid #ddd;" />
                            </div>
                        }
                    }
                    else
                    {
                        <text>Список обложек пуст или некорректен.</text>
                    }
                }
                catch (JsonReaderException) // Catches errors during JSON deserialization
                {
                        // Attempt to display as a single image if not a JSON array
                    <div>
                        <a href="@Model.Covers" target="_blank">@Model.Covers</a>
                        <br />
                        <img src="@Model.Covers" alt="Обложка (одиночная)" style="max-width: 100px; max-height: 150px; margin-top: 2px; border: 1px solid #ddd;" />
                    </div>
                }
                catch (Exception ex) // Catch other potential errors
                {
                    <text>Ошибка отображения обложек: @ex.Message</text>
                    <br />
                    <text>Исходные данные: @Model.Covers</text>
                }
            }
            else
            {
                <text>Нет данных</text>
            }
        </dd>

        <dt class="col-sm-3">Жанры:</dt>
        <dd class="col-sm-9">
            @if (!string.IsNullOrEmpty(Model.Genres))
            {
                try
                {
                    var itemsList = JsonConvert.DeserializeObject<List<string>>(Model.Genres);
                    if (itemsList != null && itemsList.Any())
                    {
                        <ul>
                            @foreach (var item in itemsList)
                            {
                                <li>@item</li>
                            }
                        </ul>
                    }
                    else
                    {
                        @Model.Genres
                    }
                }
                catch (Exception)
                {
                    @Model.Genres
                    // Fallback to raw display
                }
            }
            else
            {
                <text>Нет данных</text>
            }
        </dd>

        <dt class="col-sm-3">Теги:</dt>
        <dd class="col-sm-9">
            @if (!string.IsNullOrEmpty(Model.Tags))
            {
                try
                {
                    var itemsList = JsonConvert.DeserializeObject<List<string>>(Model.Tags);
                    if (itemsList != null && itemsList.Any())
                    {
                        <ul>
                            @foreach (var item in itemsList)
                            {
                                <li>@item</li>
                            }
                        </ul>
                    }
                    else
                    {
                        @Model.Tags
                    }
                }
                catch (Exception)
                {
                    @Model.Tags
                    // Fallback to raw display
                }
            }
            else
            {
                <text>Нет данных</text>
            }
        </dd>

        <dt class="col-sm-3">Тип:</dt>
        <dd class="col-sm-9">@Model.Type</dd>

        <dt class="col-sm-3">Формат:</dt>
        <dd class="col-sm-9">@Model.Format</dd>

        <dt class="col-sm-3">Год выпуска:</dt>
        <dd class="col-sm-9">@(Model.ReleaseYear.HasValue ? Model.ReleaseYear.Value.ToString() : "-")</dd>

        <dt class="col-sm-3">Альтернативные названия:</dt>
        <dd class="col-sm-9">
            @if (!string.IsNullOrEmpty(Model.AlternativeTitles))
            {
                try
                {
                    var itemsList = JsonConvert.DeserializeObject<List<string>>(Model.AlternativeTitles);
                    if (itemsList != null && itemsList.Any())
                    {
                        <ul>
                            @foreach (var item in itemsList)
                            {
                                <li>@item</li>
                            }
                        </ul>
                    }
                    else
                    {
                        @Model.AlternativeTitles
                    }
                }
                catch (Exception)
                {
                    @Model.AlternativeTitles
                    // Fallback to raw display
                }
            }
            else
            {
                <text>Нет данных</text>
            }
        </dd>

        <dt class="col-sm-3">Автор ID:</dt>
        <dd class="col-sm-9">@(Model.AuthorId.HasValue ? Model.AuthorId.Value.ToString() : "-")</dd>
    </dl>
}
else
{
    <p class="text-warning">Данные о новелле отсутствуют.</p>
}
