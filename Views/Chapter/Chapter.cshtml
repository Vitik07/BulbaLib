@{
    ViewData["Title"] = "Глава";
    Layout = null;
}
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8" />
    <title>Глава</title>
    <style>
        <link rel="stylesheet" href="~/css/Chapter.css" / >
    </style>
</head>
<body>

<!-- Закреплённая верхняя панель -->
<div class="header-bar" id="headerBar">
    <!-- Кнопка "Назад" -->
    <button class="back-button" id="backButton">←</button>

    <!-- Название главы -->
    <div class="header-title" id="chapterFullTitle">Загрузка...</div>

    <!-- Иконка закладки -->
    <img class="bookmark-icon" id="bookmarkButton"
         src="/Resource/bookmark-empty.png"
         alt="Добавить закладку" />
</div>

<!-- Текст главы прямо на странице -->
<div class="scroll-view" id="chapterContent">
    Содержание главы будет загружено сюда...
</div>

<script>
    const baseUrl = window.location.origin;

    const urlParams = new URLSearchParams(window.location.search);
    const chapterId = urlParams.get('chapterId');
    const userId = localStorage.getItem('userId');

    const chapterFullTitle = document.getElementById('chapterFullTitle');
    const chapterContent = document.getElementById('chapterContent');
    const bookmarkButton = document.getElementById('bookmarkButton');
    const headerBar = document.getElementById('headerBar');

    let chapter = null; // ✅ Глобально
    let lastScrollY = window.scrollY;

    // Показ/скрытие хедера
    function handleScroll() {
        const currentScrollY = window.scrollY;
        if (currentScrollY <= 0 || currentScrollY < lastScrollY) {
            headerBar.classList.remove('hidden');
        } else {
            headerBar.classList.add('hidden');
        }
        lastScrollY = currentScrollY;
    }

    // Показать хедер при наведении мыши к верху
    document.addEventListener('mousemove', (e) => {
        if (e.clientY < 60) {
            headerBar.classList.remove('hidden');
        }
    });

    window.addEventListener('scroll', handleScroll);

    async function loadChapter() {
        if (!chapterId) {
            chapterFullTitle.textContent = 'Ошибка: ID главы не указан';
            chapterContent.textContent = 'Пожалуйста, откройте главу через список.';
            return;
        }

        try {
            const responseChapter = await fetch(`${baseUrl}/api/chapters/${chapterId}`);
            chapter = await responseChapter.json();

            const responseNovel = await fetch(`${baseUrl}/api/novels/${chapter.novelId}`);
            const novelData = await responseNovel.json();

            chapterFullTitle.innerHTML =
                `${novelData.title}. Глава ${chapter.number} — ${chapter.title}`;

            chapterContent.textContent = chapter.content;

            if (userId) {
                const responseBookmark = await fetch(`${baseUrl}/api/users/${userId}/bookmarks`);
                const bookmarks = await responseBookmark.json();
                const novelBookmarks = bookmarks[String(chapter.novelId)];
                const hasBookmark = Array.isArray(novelBookmarks) && novelBookmarks.includes(Number(chapter.id));
                let isBookmarked = hasBookmark;

                bookmarkButton.src = isBookmarked
                    ? '/Resource/bookmark-filled.png'
                    : '/Resource/bookmark-empty.png';

                bookmarkButton.onclick = async () => {
                    if (!isBookmarked) {
                        try {
                            const payload = {
                                novelId: parseInt(chapter.novelId),
                                chapterId: parseInt(chapter.id)
                            };

                            const response = await fetch(`${baseUrl}/api/users/${userId}/bookmarks`, {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify(payload)
                            });

                            const result = await response.json();

                            if (response.ok) {
                                isBookmarked = true;
                                bookmarkButton.src = '/Resource/bookmark-filled.png';
                                alert('Закладка добавлена');
                            } else if (response.status === 409) {
                                alert('Эта глава уже в закладках');
                            } else {
                                throw new Error(result.message || 'Неизвестная ошибка');
                            }

                        } catch (err) {
                            console.error("Ошибка при добавлении закладки:", err);
                            alert("Не удалось обновить закладку");
                        }
                    }
                };
            }

        } catch (error) {
            console.error("🚫 Ошибка загрузки главы:", error);
            chapterFullTitle.textContent = "Ошибка загрузки";
            chapterContent.textContent = "Не удалось загрузить данные главы.";
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        loadChapter();
    });

    document.getElementById('backButton').addEventListener('click', () => {
        const novelId = chapter?.novelId || localStorage.getItem('lastNovelId');

        if (novelId) {
            window.location.href = `/novel?id=${novelId}`;
        } else {
            window.location.href = '/';
        }
    });
</script>

</body>
</html>