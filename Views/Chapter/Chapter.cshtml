﻿﻿@{
    ViewData["Title"] = "Глава";

    Layout = null;
}
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8" />
    <title>Глава</title>
    <link rel="stylesheet" href="~/css/Chapter.css" />
</head>
<body>

    <div class="header-bar" id="headerBar">
        <button class="back-button" id="backButton" title="К списку глав">←</button>
        <div class="header-title-wrap">
            <button class="prev-chapter-btn chapter-nav-btn" id="prevChapterBtn" title="Предыдущая глава">‹</button>
            <div class="header-title" id="chapterFullTitle" title="">Загрузка...</div>
            <button class="next-chapter-btn chapter-nav-btn" id="nextChapterBtn" title="Следующая глава">›</button>
        </div>
        <a href="#" role="button" class="chapter-page-bookmark-button" id="bookmarkButton" title="Добавить закладку">
            <i class="far fa-bookmark"></i>
        </a>
    </div>

    <div class="scroll-view" id="chapterContent">Содержание главы будет загружено сюда...</div>

    <script>
        const baseUrl = window.location.origin;

        function getChapterIdFromUrl() {
            const match = window.location.pathname.match(/^\/chapter\/(\d+)/);
            return match ? match[1] : null;
        }
        const chapterId = getChapterIdFromUrl();

        const chapterFullTitle = document.getElementById('chapterFullTitle');
        const chapterContent = document.getElementById('chapterContent');
        const bookmarkButton = document.getElementById('bookmarkButton');
        const headerBar = document.getElementById('headerBar');
        const prevBtn = document.getElementById('prevChapterBtn');
        const nextBtn = document.getElementById('nextChapterBtn');

        let chapter = null;
        let chaptersList = null;
        let lastScrollY = window.scrollY;

        function handleScroll() {
            const currentScrollY = window.scrollY;
            if (currentScrollY <= 0 || currentScrollY < lastScrollY) {
                headerBar.classList.remove('hidden');
            } else {
                headerBar.classList.add('hidden');
            }
            lastScrollY = currentScrollY;
        }

        document.addEventListener('mousemove', (e) => {
            if (e.clientY < 60) {
                headerBar.classList.remove('hidden');
            }
        });

        window.addEventListener('scroll', handleScroll);

        // Проверка авторизации пользователя через claims
        async function isUserAuthenticated() {
            try {
                const res = await fetch(`${baseUrl}/api/users/me`, { credentials: "include" });
                return res.ok;
            } catch {
                return false;
            }
        }

        async function loadChapter() {
            if (!chapterId) {
                chapterFullTitle.textContent = 'Ошибка: ID главы не указан';
                chapterContent.textContent = 'Пожалуйста, откройте главу через список.';
                return;
            }

            try {
                // Получаем объект главы
                const responseChapter = await fetch(`${baseUrl}/api/chapters/${chapterId}`);
                chapter = await responseChapter.json();

                // Получаем объект новеллы и список глав (с bookmarked)
                const responseNovel = await fetch(`${baseUrl}/api/novels/${chapter.novelId}`);
                const novelData = await responseNovel.json();

                chaptersList = Array.isArray(novelData.chapters) ? novelData.chapters : [];

                const idx = chaptersList.findIndex(ch => String(ch.id) === String(chapter.id));
                let prevChapter = null;
                let nextChapter = null;
                if (idx !== -1) {
                    if (idx > 0) prevChapter = chaptersList[idx - 1];
                    if (idx < chaptersList.length - 1) nextChapter = chaptersList[idx + 1];
                }

                if (prevChapter) {
                    prevBtn.disabled = false;
                    prevBtn.onclick = () => window.location.href = `/chapter/${prevChapter.id}`;
                } else {
                    prevBtn.disabled = true;
                    prevBtn.onclick = null;
                }
                if (nextChapter) {
                    nextBtn.disabled = false;
                    nextBtn.onclick = () => window.location.href = `/chapter/${nextChapter.id}`;
                } else {
                    nextBtn.disabled = true;
                    nextBtn.onclick = null;
                }

                const fullTitle = `${novelData.title}. ${chapter.number}${chapter.title && chapter.title.trim() ? ' — ' + chapter.title : ''}`;
                chapterFullTitle.textContent = fullTitle;
                chapterFullTitle.title = fullTitle;

                function renderChapterContent(raw) {
                    return raw.replace(/\[img:([^\]]+)\]/g, (match, url) =>
                        `<img src="${url.trim()}" alt="картинка" style="max-width:100%;">`
                    );
                }
                chapterContent.innerHTML = renderChapterContent(chapter.content || "");

                // --------- Закладки ---------
                const isAuth = await isUserAuthenticated();
                // ищем текущую главу в списке глав с bookmarked
                const currentChapterInfo = chaptersList.find(ch => String(ch.id) === String(chapter.id));
                let isBookmarked = !!(currentChapterInfo && currentChapterInfo.bookmarked);
                console.log(currentChapterInfo, isBookmarked);

                if (isAuth) {
                    const iconElement = bookmarkButton.querySelector('i');
                    if (isBookmarked) {
                        iconElement.classList.remove('far');
                        iconElement.classList.add('fas'); // Filled icon
                        bookmarkButton.classList.add('bookmarked');
                        bookmarkButton.title = "Закладка установлена";
                    } else {
                        iconElement.classList.remove('fas');
                        iconElement.classList.add('far'); // Empty icon
                        bookmarkButton.classList.remove('bookmarked');
                        bookmarkButton.title = "Добавить закладку";
                    }
                    bookmarkButton.style.opacity = "1";

                    bookmarkButton.onclick = async (e) => {
                        e.preventDefault();
                        const iconElement = bookmarkButton.querySelector('i'); // Ensure iconElement is defined in this scope

                        if (isBookmarked) { // Если закладка уже установлена (клиентское или серверное состояние)
                            try {
                                const response = await fetch(`${baseUrl}/api/users/bookmarks/chapter/${chapter.id}`, {
                                    method: 'DELETE',
                                    headers: { 'Content-Type': 'application/json' },
                                    credentials: "include"
                                });

                                if (response.ok) {
                                    isBookmarked = false;
                                    iconElement.classList.remove('fas');
                                    iconElement.classList.add('far');
                                    bookmarkButton.classList.remove('bookmarked');
                                    bookmarkButton.title = "Добавить закладку";
                                } else {
                                    const result = await response.json().catch(() => null);
                                    alert(result?.message || 'Не удалось удалить закладку. Статус: ' + response.status);
                                    // Optionally, re-sync state if server failed but client thought it was bookmarked
                                    // For now, we assume the client state was correct before the click.
                                }
                            } catch (err) {
                                console.error("Ошибка при удалении закладки:", err);
                                alert("Не удалось обновить закладку (catch)");
                            }
                        } else { // Если закладки нет, добавляем
                            try {
                                const payload = {
                                    novelId: parseInt(chapter.novelId),
                                    chapterId: parseInt(chapter.id)
                                };
                                const response = await fetch(`${baseUrl}/api/users/bookmarks`, {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify(payload),
                                    credentials: "include"
                                });

                                if (response.ok) {
                                    isBookmarked = true;
                                    iconElement.classList.remove('far');
                                    iconElement.classList.add('fas');
                                    bookmarkButton.classList.add('bookmarked');
                                    bookmarkButton.title = "Закладка установлена";
                                } else if (response.status === 409) { // Already bookmarked (conflict)
                                    isBookmarked = true; // Sync client state
                                    iconElement.classList.remove('far');
                                    iconElement.classList.add('fas');
                                    bookmarkButton.classList.add('bookmarked');
                                    bookmarkButton.title = "Закладка установлена";
                                    // alert('Эта глава уже в закладках (409)');
                                } else {
                                    const result = await response.json().catch(() => null);
                                    throw new Error(result?.message || 'Неизвестная ошибка при добавлении. Статус: ' + response.status);
                                }
                            } catch (err) {
                                console.error("Ошибка при добавлении закладки:", err);
                                alert("Не удалось добавить закладку: " + err.message);
                            }
                        }
                    };
                } else { // Not authenticated
                    const iconElement = bookmarkButton.querySelector('i');
                    iconElement.classList.remove('fas');
                    iconElement.classList.add('far');
                    bookmarkButton.classList.remove('bookmarked');
                    bookmarkButton.style.opacity = "0.5";
                    bookmarkButton.title = "Войдите, чтобы ставить закладки";
                    bookmarkButton.onclick = (e) => {
                        e.preventDefault();
                        alert("Войдите, чтобы ставить закладки!");
                    };
                }
                // ----------------------------

            } catch (error) {
                console.error("🚫 Ошибка загрузки главы:", error);
                chapterFullTitle.textContent = "Ошибка загрузки";
                chapterContent.textContent = "Не удалось загрузить данные главы.";
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            loadChapter();
        });

        document.getElementById('backButton').addEventListener('click', () => {
            const novelId = chapter?.novelId || localStorage.getItem('lastNovelId');
            if (novelId) {
                window.location.href = `/novel/${novelId}`;
            } else {
                window.location.href = '/';
            }
        });
    </script>
</body>
</html>