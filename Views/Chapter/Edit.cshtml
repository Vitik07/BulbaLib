@model BulbaLib.Models.ChapterEditModel
@{
    ViewData["Title"] = "Редактировать главу";
    Layout = null;
}
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - BulbaLib</title>
    <link rel="stylesheet" href="~/css/Chapter_Form.css" asp-append-version="true" />
</head>
<body>
    <div class="chapter-form-container">
        <h1>@ViewData["Title"]</h1>
        @if (Model.NovelTitle != null)
        {
            <h4>Новелла: @Model.NovelTitle</h4>
            <h5>Глава: @Model.Number - @Model.Title</h5>
        }
        <form asp-controller="Chapters" asp-action="Edit" asp-route-id="@Model.Id" method="post" enctype="multipart/form-data">
            @Html.AntiForgeryToken()
            <input type="hidden" asp-for="Id" />
            <input type="hidden" asp-for="NovelId" />
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group mb-3">
                <label asp-for="Number"></label>
                <input asp-for="Number" class="form-control" />
                <span asp-validation-for="Number" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Title"></label>
                <input asp-for="Title" class="form-control" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label>Загрузить текстовый файл главы (.txt)</label>
                <div class="file-upload-wrapper">
                    <input type="file" id="chapterTextFile" accept=".txt" class="file-upload-input" />
                    <button type="button" id="chapterFileBtn" class="btn file-upload-btn" tabindex="-1">
                        <svg width="22" height="22" viewBox="0 0 24 24" style="vertical-align: middle; margin-right: 8px;">
                            <path fill="#fff" d="M12 16.5a1 1 0 0 1-1-1v-7.086l-2.293 2.293a1 1 0 1 1-1.414-1.414l4-4a1 1 0 0 1 1.414 0l4 4a1 1 0 1 1-1.414 1.414L13 8.414V15.5a1 1 0 0 1-1 1Z"/>
                            <rect fill="#fff" x="5" y="18" width="14" height="2" rx="1"/>
                        </svg>
                        Выбрать .txt файл
                    </button>
                    <span class="file-upload-filename" id="chapterFileName">Файл не выбран</span>
                </div>
                <small id="fileLoadStatus" class="form-text text-muted">
                    Выберите текстовый файл, его содержимое будет скопировано в поле "Содержимое главы".
                </small>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Content"></label>
                <div class="content-toolbar mb-1">
                    <button type="button" id="insertImageBtn" class="btn btn-sm btn-outline-secondary">Вставить изображение</button>
                    <input type="file" id="imageUploadInput" accept="image/*" style="display: none;" />
                </div>
                <textarea asp-for="Content" id="Content" class="form-control" rows="15" style="display: none;"></textarea>
                <div id="editableContent" class="form-control" contenteditable="true" style="height: 450px; overflow-y: auto; border: 1px solid #ced4da; padding: .375rem .75rem;"></div>
                <span asp-validation-for="Content" class="text-danger"></span>
            </div>
            <div class="form-group mt-4">
                <button type="submit" class="btn btn-primary">Сохранить изменения</button>
                <a asp-controller="NovelView" asp-action="Novel" asp-route-id="@Model.NovelId" class="btn btn-secondary">Отмена</a>
            </div>
        </form>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const chapterTextFileInput = document.getElementById('chapterTextFile');
            const chapterFileBtn = document.getElementById('chapterFileBtn');
            const fileNameSpan = document.getElementById('chapterFileName');
            const contentTextArea = document.getElementById('Content');
            const fileLoadStatus = document.getElementById('fileLoadStatus');

            if (chapterFileBtn && chapterTextFileInput) {
                chapterFileBtn.addEventListener('click', function () {
                    chapterTextFileInput.click();
                });
            }

            if (chapterTextFileInput && contentTextArea) {
                chapterTextFileInput.addEventListener('change', function (e) {
                    const file = e.target.files[0];
                    if (!file) {
                        if (fileNameSpan) fileNameSpan.textContent = 'Файл не выбран';
                        if (fileLoadStatus) fileLoadStatus.textContent = 'Файл не выбран.';
                        return;
                    }
                    if (fileNameSpan) fileNameSpan.textContent = file.name;
                    if (file.type !== "text/plain" && !file.name.endsWith('.txt')) {
                        alert('Можно загрузить только .txt файл!');
                        if (fileLoadStatus) fileLoadStatus.textContent = 'Выбран неверный тип файла.';
                        chapterTextFileInput.value = "";
                        if (fileNameSpan) fileNameSpan.textContent = 'Файл не выбран';
                        return;
                    }
                    const reader = new FileReader();
                    reader.onload = function (evt) {
                        contentTextArea.value = evt.target.result;
                        if (fileLoadStatus) {
                            fileLoadStatus.textContent = 'Содержимое файла загружено в текстовое поле.';
                            fileLoadStatus.style.color = 'green';
                            setTimeout(() => {
                                fileLoadStatus.textContent = 'Выберите текстовый файл, его содержимое будет скопировано в поле "Содержимое главы".';
                                fileLoadStatus.style.color = '';
                            }, 3000);
                        }
                    };
                    reader.onerror = function () {
                        alert('Ошибка при чтении файла!');
                        if (fileLoadStatus) fileLoadStatus.textContent = 'Ошибка при чтении файла.';
                    };
                    reader.readAsText(file, "utf-8");
                });
            }

            // Image Upload Logic
            const insertImageBtn = document.getElementById('insertImageBtn');
            const imageUploadInput = document.getElementById('imageUploadInput');
            const csrfToken = document.querySelector('input[name="__RequestVerificationToken"]').value;
            const chapterId = @Model.Id;

            const hiddenContentTextArea = document.getElementById('Content'); // Renamed
            const editableDiv = document.getElementById('editableContent');

            // Function to convert [img:URL] to <img> tags (same as in Create.cshtml)
            function rawToHtml(rawText) {
                if (rawText === null || rawText === undefined) return '';
                let html = rawText.replace(/&/g, "&amp;")
                                  .replace(/</g, "&lt;")
                                  .replace(/>/g, "&gt;")
                                  .replace(/"/g, "&quot;")
                                  .replace(/'/g, "&#039;");
                html = html.replace(/\[img:(.*?)\]/g, '<img src="$1" style="max-width: 100%; height: auto; display: block; margin-bottom: 5px;" alt="Изображение">')
                           .replace(/\n/g, '<br>');
                return html;
            }

            // Function to convert [img:URL] to <img> tags (same as in Create.cshtml)
            function rawToHtml(rawText) { // Copied from Create.cshtml
                if (rawText === null || rawText === undefined) return '';
                let html = rawText.replace(/&/g, "&amp;")
                                  .replace(/</g, "&lt;")
                                  .replace(/>/g, "&gt;")
                                  .replace(/"/g, "&quot;")
                                  .replace(/'/g, "&#039;");
                html = html.replace(/\[img:(.*?)\]/g, '<img src="$1" style="max-width: 100%; height: auto; display: block; margin-bottom: 5px;" alt="Изображение">')
                           .replace(/\n/g, '<br>');
                return html;
            }

            // Function to convert <img> tags from editable div to [img:URL] (Copied from Create.cshtml)
            function htmlToRaw(element) {
                let rawText = '';
                const childNodes = element.childNodes;

                childNodes.forEach(node => {
                    if (node.nodeType === Node.TEXT_NODE) {
                        rawText += node.textContent;
                    } else if (node.nodeName === 'IMG' && node.classList && node.classList.contains('image-in-editor')) {
                        rawText += `[img:${node.getAttribute('src')}]`;
                    } else if (node.nodeName === 'BR') {
                        rawText += '\n';
                    } else if (node.nodeName === 'DIV') {
                        if (node.classList && node.classList.contains('image-container-editable')) {
                            const imgInside = node.querySelector('img.image-in-editor');
                            if (imgInside && imgInside.src) {
                                rawText += `[img:${imgInside.getAttribute('src')}]`;
                                if (node.nextSibling) { 
                                    rawText += '\n';
                                }
                            }
                        } else {
                            rawText += htmlToRaw(node) + '\n';
                        }
                    } else if (node.nodeName === 'P') {
                        rawText += htmlToRaw(node) + '\n';
                    } else if (node.childNodes && node.childNodes.length > 0) {
                        rawText += htmlToRaw(node);
                    }
                });
                return rawText.trim();
            }

            // Initial population for Edit page
            if (hiddenContentTextArea && editableDiv) {
                editableDiv.innerHTML = rawToHtml(hiddenContentTextArea.value);

                // Sync from editableDiv to hiddenTextArea on input
                editableDiv.addEventListener('input', function () {
                    const rawText = htmlToRaw(editableDiv); // Pass element
                    hiddenContentTextArea.value = rawText;
                });

                // Also sync when the form is submitted
                const form = editableDiv.closest('form'); // Find the parent form
                 if (form) {
                    form.addEventListener('submit', function() {
                        const rawText = htmlToRaw(editableDiv); // Pass element
                        hiddenContentTextArea.value = rawText;
                    });
                }
            }


            if (insertImageBtn && imageUploadInput && editableDiv && hiddenContentTextArea) { // Check editableDiv
                insertImageBtn.addEventListener('click', function () {
                    imageUploadInput.click();
                });

                imageUploadInput.addEventListener('change', async function (e) {
                    const file = e.target.files[0];
                    if (!file) return;

                    if (!file.type.startsWith('image/')) {
                        alert('Пожалуйста, выберите файл изображения.');
                        imageUploadInput.value = "";
                        return;
                    }

                    const formData = new FormData();
                    formData.append('image', file);

                    insertImageBtn.disabled = true;
                    insertImageBtn.textContent = 'Загрузка...';

                    try {
                        // Use the correct chapterId for existing chapters
                        const response = await fetch(`/api/chapters/${chapterId}/upload-image`, {
                            method: 'POST',
                            body: formData,
                            headers: {
                                'RequestVerificationToken': csrfToken
                            }
                        });

                        if (response.ok) {
                            const result = await response.json();
                            const imageUrl = result.url;

                            // Create image container
                            const imageContainer = document.createElement('div');
                            imageContainer.className = 'image-container-editable';

                            // Create <img> tag
                            const imgElement = document.createElement('img');
                            imgElement.className = 'image-in-editor';
                            imgElement.src = imageUrl;
                            imgElement.alt = "Изображение";

                            imageContainer.appendChild(imgElement); // Append image to container

                            // Add delete button
                            const deleteBtn = document.createElement('span');
                            deleteBtn.className = 'delete-image-btn';
                            deleteBtn.innerHTML = '&times;'; // 'X' character
                            deleteBtn.title = 'Удалить изображение';
                            deleteBtn.addEventListener('click', function(event) {
                                event.stopPropagation();
                                imageContainer.remove();
                                hiddenContentTextArea.value = htmlToRaw(editableDiv);
                                editableDiv.focus();
                            });
                            imageContainer.appendChild(deleteBtn);

                            const selection = window.getSelection();
                            let finalNodeToInsert = imageContainer;

                            let insertAtCursor = false;
                            if (selection.rangeCount > 0) {
                                const range = selection.getRangeAt(0);
                                if (editableDiv.contains(range.commonAncestorContainer)) {
                                    insertAtCursor = true;
                                    range.deleteContents();
                                    range.insertNode(finalNodeToInsert);
                                    range.setStartAfter(finalNodeToInsert);
                                    range.collapse(true);
                                    selection.removeAllRanges();
                                    selection.addRange(range);
                                }
                            }

                            if (!insertAtCursor) {
                                // Fallback: append to end
                                if (editableDiv.innerHTML.trim() !== "") {
                                    const lastChild = editableDiv.lastChild;
                                     if (lastChild && lastChild.nodeName !== 'BR' && !(lastChild.classList && lastChild.classList.contains('image-container-editable'))) {
                                        editableDiv.appendChild(document.createElement('br'));
                                    }
                                }
                                editableDiv.appendChild(finalNodeToInsert);
                                const newRange = document.createRange();
                                newRange.setStartAfter(finalNodeToInsert);
                                newRange.collapse(true);
                                selection.removeAllRanges();
                                selection.addRange(newRange);
                            }
                            editableDiv.focus(); // Focus the editor

                            // Sync to hidden textarea
                            const rawText = htmlToRaw(editableDiv); // Pass element
                            hiddenContentTextArea.value = rawText;

                        } else {
                            const errorResult = await response.json().catch(() => ({ message: 'Не удалось загрузить изображение. Статус: ' + response.status }));
                            alert(`Ошибка: ${errorResult.message || errorResult.error || 'Неизвестная ошибка сервера'}`);
                        }
                    } catch (error) {
                        console.error('Upload image error:', error);
                        alert('Произошла ошибка при загрузке изображения. Пожалуйста, проверьте консоль.');
                    } finally {
                        imageUploadInput.value = "";
                        insertImageBtn.disabled = false;
                        insertImageBtn.textContent = 'Вставить изображение';
                    }
                });
            }
        });
    </script>
</body>
</html>