@model BulbaLib.Models.ChapterCreateModel
@{
    ViewData["Title"] = "Добавить главу";

    Layout = null;
}

<h1>@ViewData["Title"]</h1>
<link rel="stylesheet" href="~/css/novel_form.css" asp-append-version="true" />
@if (ViewData["NovelTitle"] != null)
{
    <h4>Для новеллы: @ViewData["NovelTitle"]</h4>
}

<form asp-action="Create" method="post" enctype="multipart/form-data">
    @Html.AntiForgeryToken()
    <input type="hidden" asp-for="NovelId" />

    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <div class="form-group mb-3">
        <label asp-for="Number" class="control-label"></label>
        <input asp-for="Number" class="form-control" placeholder="Например: Глава 1, или Том 2 Глава 15.1" />
        <span asp-validation-for="Number" class="text-danger"></span>
    </div>

    <div class="form-group mb-3">
        <label asp-for="Title" class="control-label"></label>
        <input asp-for="Title" class="form-control" />
        <span asp-validation-for="Title" class="text-danger"></span>
    </div>

    <div class="form-group mb-3">
        <label asp-for="ChapterTextFile" class="control-label">Загрузить текстовый файл главы (.txt)</label>
        <input type="file" asp-for="ChapterTextFile" class="form-control" accept=".txt" />
        <span asp-validation-for="ChapterTextFile" class="text-danger"></span>
        <small id="fileLoadStatus" class="form-text text-muted">Если выбран файл, его содержимое заменит текст в поле "Содержимое".</small>
    </div>

    <div class="form-group mb-3">
        <label asp-for="Content" class="control-label"></label>
        <textarea asp-for="Content" class="form-control" rows="15"></textarea>
        <span asp-validation-for="Content" class="text-danger"></span>
        <small class="form-text text-muted">Поддерживается HTML разметка для форматирования текста главы. Будет перезаписано содержимым файла, если файл выбран.</small>
    </div>

    <div class="form-group mt-4">
        <button type="submit" class="btn btn-primary">Сохранить главу</button>
        <a asp-controller="NovelView" asp-action="Details" asp-route-id="@Model.NovelId" class="btn btn-secondary">Отмена</a>
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const chapterTextFileInput = document.querySelector('input[type="file"][asp-for="ChapterTextFile"]');
            const contentTextArea = document.querySelector('textarea[asp-for="Content"]');
            const form = document.querySelector('form[asp-action="Create"]');
            const novelIdForRedirect = '@Model.NovelId';

            if (chapterTextFileInput && contentTextArea) {
                chapterTextFileInput.addEventListener('change', function (event) {
                    const file = event.target.files[0];
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = function (e) {
                            contentTextArea.value = e.target.result;
                            const fileLoadStatus = document.getElementById('fileLoadStatus');
                            if (fileLoadStatus) {
                                fileLoadStatus.textContent = 'Содержимое файла загружено в текстовое поле.';
                                fileLoadStatus.style.color = 'green';
                                setTimeout(() => {
                                    // Reset message after a few seconds
                                    fileLoadStatus.textContent = 'Если выбран файл, его содержимое заменит текст в поле "Содержимое".';
                                    fileLoadStatus.style.color = ''; // Revert to default color
                                }, 3000);
                            }
                            // Optionally clear the file input
                            // chapterTextFileInput.value = ''; // Clears the file input
                        };
                        reader.onerror = function (e) {
                            console.error("File reading error", e);
                            const fileLoadStatus = document.getElementById('fileLoadStatus');
                            if (fileLoadStatus) {
                                fileLoadStatus.textContent = 'Ошибка при чтении файла. Убедитесь, что это текстовый файл.';
                                fileLoadStatus.style.color = 'red';
                            } else {
                                alert("Ошибка при чтении файла. Убедитесь, что это текстовый файл.");
                            }
                        };
                        reader.readAsText(file);
                    }
                });
            }

            if (form) {
                form.addEventListener('submit', async function (event) {
                    event.preventDefault();

                    const formData = new FormData(form); // Use FormData for easy token retrieval
                    const antiForgeryToken = formData.get('__RequestVerificationToken');
                    
                    const novelId = formData.get('NovelId');
                    const number = formData.get('Number');
                    const title = formData.get('Title');
                    const content = contentTextArea.value; // Ensure this is up-to-date

                    if (!content) {
                        alert("Содержимое главы не может быть пустым.");
                        return;
                    }
                     if (!novelId) {
                        alert("NovelId не найден. Невозможно создать главу.");
                        return;
                    }

                    const chapterCreateRequest = {
                        novelId: novelId,
                        number: number,
                        title: title,
                        content: content
                    };

                    console.log('Submitting ChapterCreateRequest:', chapterCreateRequest);

                    try {
                        const response = await fetch('/api/Chapters', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': antiForgeryToken
                            },
                            body: JSON.stringify(chapterCreateRequest)
                        });

                        if (response.ok) {
                            const result = await response.json();
                            console.log('Chapter created successfully:', result);
                            // Redirect to novel details page
                            if (novelIdForRedirect && novelIdForRedirect !== '00000000-0000-0000-0000-000000000000' && novelIdForRedirect !== '') {
                                window.location.href = `/Novel/Novel/${novelIdForRedirect}`;
                            } else if (result.novelId) { // Fallback if Model.NovelId was not available for some reason
                                window.location.href = `/Novel/Novel/${result.novelId}`;
                            }
                            else {
                                console.warn("NovelId for redirect not available from model or response. Redirecting to homepage or catalog as fallback.");
                                window.location.href = '/'; // Or a generic catalog page
                            }
                        } else {
                            const errorData = await response.json();
                            console.error('Error creating chapter:', response.status, errorData);
                            alert(`Error creating chapter: ${response.status}\n${JSON.stringify(errorData.errors || errorData, null, 2)}`);
                        }
                    } catch (error) {
                        console.error('Network error or other issue:', error);
                        alert('An error occurred while submitting the form. Please check the console for details.');
                    }
                });
            }
        });
    </script>
}
