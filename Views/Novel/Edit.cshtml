@model BulbaLib.Models.NovelEditModel // Предполагаем, что для редактирования будет своя модель NovelEditModel
@{
    Layout = null; // Отключаем основной Layout
    ViewData["Title"] = "Редактирование новеллы";
}
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]: @Model.Title - BulbaLib</title>
    @* <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" /> *@
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/novel_form.css" asp-append-version="true" />
</head>
<body>
    <div class="container">
        <main role="main" class="pb-3">

            <h2>@ViewData["Title"]: @Model.Title</h2>

            <form asp-action="Edit" asp-route-id="@Model.Id" method="post" enctype="multipart/form-data">
                @Html.AntiForgeryToken()
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input type="hidden" asp-for="Id" />

                <div class="form-group mb-3">
                    <label asp-for="Title" class="control-label">Название новеллы</label>
                    <input asp-for="Title" class="form-control" />
                    <span asp-validation-for="Title" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="Description" class="control-label">Описание</label>
                    <textarea asp-for="Description" class="form-control" rows="5"></textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label class="control-label">Текущая основная обложка</label>
                    @{
                        string currentCoverUrl = null;
                        if (!string.IsNullOrWhiteSpace(Model.Covers)) {
                            try {
                                var coversList = System.Text.Json.JsonSerializer.Deserialize<List<string>>(Model.Covers);
                                if (coversList != null && coversList.Count > 0) {
                                    currentCoverUrl = coversList.First(); // Показываем первую обложку как основную
                                }
                            } catch { /* Ошибка парсинга JSON, ничего не показываем */ }
                        }
                    }
                    @if (!string.IsNullOrWhiteSpace(currentCoverUrl))
                    {
                        <div class="mb-2">
                            <img src="@Url.Content(currentCoverUrl)" alt="Текущая обложка" style="max-width: 200px; max-height: 200px; display:block;" />
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">Основная обложка не загружена.</p>
                    }
                </div>

                <div class="form-group mb-3">
                    <label asp-for="NewCoverFile" class="control-label"></label>
                    <input asp-for="NewCoverFile" type="file" class="form-control" accept="image/jpeg, image/png, image/gif, image/webp" />
                    <span asp-validation-for="NewCoverFile" class="text-danger"></span>
                    <small class="form-text text-muted">Выберите новый файл, если хотите заменить основную обложку (jpg, png, gif, webp).</small>
                </div>

                @* Скрытое поле для Model.Covers, чтобы передать текущее значение, если файл не меняется.
                   Это важно, если мы не хотим потерять существующие обложки, если новый файл не загружен.
                   Однако, если NewCoverFile загружен, это значение будет перезаписано в контроллере.
                *@
                <input type="hidden" asp-for="Covers" />

                <div class="form-group mb-3">
                    <label asp-for="Genres" class="control-label"></label>
                    @* Новый интерфейс выбора жанров будет здесь *@
                    <div id="selectedGenresContainer" class="mt-2"></div> @* Контейнер для отображения выбранных жанров *@
                    <button type="button" id="addGenreBtn" class="btn btn-sm btn-primary mt-1">Добавить жанр</button>
                    <input type="hidden" asp-for="Genres" /> @* Скрытое поле для отправки данных *@
                    <span asp-validation-for="Genres" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="Tags" class="control-label"></label>
                    @* Новый интерфейс выбора тегов будет здесь *@
                    <div id="selectedTagsContainer" class="mt-2"></div> @* Контейнер для отображения выбранных тегов *@
                    <button type="button" id="addTagBtn" class="btn btn-sm btn-primary mt-1">Добавить тег</button>
                    <input type="hidden" asp-for="Tags" /> @* Скрытое поле для отправки данных *@
                    <span asp-validation-for="Tags" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="Type" class="control-label"></label>
                    <select asp-for="Type" class="form-control">
                        <option value="">-- Выберите тип --</option>
                        <option value="Япония">Япония</option>
                        <option value="Корея">Корея</option>
                        <option value="Китай">Китай</option>
                        <option value="Английский">Английский</option>
                        <option value="Авторский">Авторский</option>
                        <option value="Фанфик">Фанфик</option>
                    </select>
                    <span asp-validation-for="Type" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="Format" class="control-label"></label>
                    <select asp-for="Format" class="form-control">
                        <option value="">-- Выберите формат --</option>
                        <option value="Веб">Веб</option>
                        <option value="Лайт">Лайт</option>
                    </select>
                    <span asp-validation-for="Format" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="ReleaseYear" class="control-label">Год релиза</label>
                    <input asp-for="ReleaseYear" type="number" class="form-control" />
                    <span asp-validation-for="ReleaseYear" class="text-danger"></span>
                    <small class="form-text text-muted">Укажите год релиза (4 цифры, например, 2023). Год должен быть не ранее 1900 и не позднее 2099.</small>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="AlternativeTitles" class="control-label">Альтернативные названия</label>
                    <textarea asp-for="AlternativeTitles" class="form-control" rows="3"></textarea>
                    <span asp-validation-for="AlternativeTitles" class="text-danger"></span>
                    <small class="form-text text-muted">Каждое альтернативное название вводите с новой строки.</small>
                </div>

                @* Отображение AuthorId и TranslatorId, если это необходимо *@
                @if (Model.AuthorId.HasValue)
                {
                    <div class="form-group mb-3">
                        <label class="control-label">ID Автора</label>
                        <input type="text" class="form-control" value="@Model.AuthorId.Value" readonly />
                    </div>
                }
                 <div class="form-group mb-3">
                        <label asp-for="AuthorLogin" class="control-label">Логин автора</label>
                        <input asp-for="AuthorLogin" class="form-control" readonly />
                    </div>


                <div class="form-group mt-3">
                    <input type="submit" value="Сохранить изменения" class="btn btn-success" />
                    <a asp-controller="NovelView" asp-action="Details" asp-route-id="@Model.Id" class="btn btn-secondary">Отмена</a>
                </div>
            </form>
        </main>
    </div>

    @* <script src="~/lib/jquery/dist/jquery.min.js"></script>
       <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script> *@
    <script src="~/js/site.js" asp-append-version="true"></script>

@* Модальное окно для Жанров *@
<div id="genreModal" class="modal" style="display:none; position:fixed; z-index:1000; left:0; top:0; width:100%; height:100%; overflow:auto; background-color:rgba(0,0,0,0.4);">
    <div class="modal-content" style="background-color:#fefefe; margin:15% auto; padding:20px; border:1px solid #888; width:80%; max-width:500px; border-radius:8px;">
        <span class="close-btn" id="closeGenreModal" style="color:#aaa; float:right; font-size:28px; font-weight:bold; cursor:pointer;">&times;</span>
        <h4>Выберите или добавьте жанры</h4>
        <div id="genreListContainer" style="max-height: 200px; overflow-y: auto; margin-bottom: 10px; border: 1px solid #ccc; padding: 10px;">
            @* Сюда будут загружаться чекбоксы с жанрами *@
        </div>
        <input type="text" id="customGenreInput" placeholder="Добавить свой жанр" class="form-control mb-2" />
        <button type="button" id="addCustomGenreBtn" class="btn btn-sm btn-secondary">Добавить свой</button>
        <button type="button" id="saveGenreSelectionBtn" class="btn btn-sm btn-success float-end">Сохранить выбор</button>
    </div>
</div>

@* Модальное окно для Тегов *@
<div id="tagModal" class="modal" style="display:none; position:fixed; z-index:1000; left:0; top:0; width:100%; height:100%; overflow:auto; background-color:rgba(0,0,0,0.4);">
    <div class="modal-content" style="background-color:#fefefe; margin:15% auto; padding:20px; border:1px solid #888; width:80%; max-width:500px; border-radius:8px;">
        <span class="close-btn" id="closeTagModal" style="color:#aaa; float:right; font-size:28px; font-weight:bold; cursor:pointer;">&times;</span>
        <h4>Выберите или добавьте теги</h4>
        <div id="tagListContainer" style="max-height: 200px; overflow-y: auto; margin-bottom: 10px; border: 1px solid #ccc; padding: 10px;">
            @* Сюда будут загружаться чекбоксы с тегами *@
        </div>
        <input type="text" id="customTagInput" placeholder="Добавить свой тег" class="form-control mb-2" />
        <button type="button" id="addCustomTagBtn" class="btn btn-sm btn-secondary">Добавить свой</button>
        <button type="button" id="saveTagSelectionBtn" class="btn btn-sm btn-success float-end">Сохранить выбор</button>
    </div>
</div>

    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const allGenresList = @Html.Raw(Json.Serialize(ViewData["AllGenres"] as List<string> ?? new List<string>()));
            const allTagsList = @Html.Raw(Json.Serialize(ViewData["AllTags"] as List<string> ?? new List<string>()));

            let currentSelectedGenres = [];
            let currentSelectedTags = [];

            const modelGenresJson = '@Html.Raw(Model.Genres)'; // Получаем JSON-строку из модели
            const modelTagsJson = '@Html.Raw(Model.Tags)';   // Получаем JSON-строку из модели

            // --- НОВАЯ ФУНКЦИЯ RENDER BADGES (скопирована из Create, идентична) ---
            function renderSelectedItemsAsBadges(containerId, selectedArray, hiddenInputElement, type, allItemsListRef, globalSelectedArrayRef) {
                const container = document.getElementById(containerId);
                if (!container) return;
                container.innerHTML = ''; // Очищаем контейнер

                selectedArray.forEach(item => {
                    const badge = document.createElement('span');
                    badge.className = 'badge bg-secondary me-1 mb-1';
                    badge.textContent = item;

                    const removeBtn = document.createElement('span');
                    removeBtn.innerHTML = '&times;';
                    removeBtn.className = 'ms-1 fw-bold';
                    removeBtn.style.cursor = 'pointer';
                    removeBtn.onclick = function() {
                        const index = globalSelectedArrayRef.indexOf(item);
                        if (index > -1) {
                            globalSelectedArrayRef.splice(index, 1);
                        }
                        if (hiddenInputElement) hiddenInputElement.value = JSON.stringify(globalSelectedArrayRef);
                        renderSelectedItemsAsBadges(containerId, globalSelectedArrayRef, hiddenInputElement, type, allItemsListRef, globalSelectedArrayRef);
                    };

                    badge.appendChild(removeBtn);
                    container.appendChild(badge);
                });
            }
            // --- КОНЕЦ НОВОЙ ФУНКЦИИ RENDER BADGES ---

            if (modelGenresJson) {
                try {
                    currentSelectedGenres = JSON.parse(modelGenresJson);
                    if (!Array.isArray(currentSelectedGenres)) currentSelectedGenres = [];
                } catch (e) {
                    console.error("Error parsing Model.Genres JSON:", e);
                    currentSelectedGenres = [];
                }
            }

            if (modelTagsJson) {
                try {
                    currentSelectedTags = JSON.parse(modelTagsJson);
                    if (!Array.isArray(currentSelectedTags)) currentSelectedTags = [];
                } catch (e) {
                    console.error("Error parsing Model.Tags JSON:", e);
                    currentSelectedTags = [];
                }
            }

            const hiddenGenresField = document.getElementById('Genres');
            const hiddenTagsField = document.getElementById('Tags');

            // Устанавливаем начальные значения для скрытых полей, если они есть в модели
            // (на случай, если пользователь ничего не изменит в модалках, но форма будет отправлена)
            if (hiddenGenresField && currentSelectedGenres.length > 0) hiddenGenresField.value = JSON.stringify(currentSelectedGenres);
            if (hiddenTagsField && currentSelectedTags.length > 0) hiddenTagsField.value = JSON.stringify(currentSelectedTags);

            // --- ИНИЦИАЛИЗАЦИЯ ПЛАШЕК ПРИ ЗАГРУЗКЕ ---
            renderSelectedItemsAsBadges('selectedGenresContainer', currentSelectedGenres, hiddenGenresField, 'genre', allGenresList, currentSelectedGenres);
            renderSelectedItemsAsBadges('selectedTagsContainer', currentSelectedTags, hiddenTagsField, 'tag', allTagsList, currentSelectedTags);
            // --- КОНЕЦ ИНИЦИАЛИЗАЦИИ ПЛАШЕК ---

            function populateModalWithCheckboxes(containerId, items, selectedItemsArray, type) {
                const container = document.getElementById(containerId);
                if (!container) return; // Добавлена проверка
                container.innerHTML = '';
                items.forEach(item => {
                    const checkboxId = `${type}-${item.replace(/\s+/g, '-')}`;
                    const isChecked = selectedItemsArray.includes(item);
                    container.innerHTML += `
                        <div>
                            <input type="checkbox" id="${checkboxId}" name="${type}" value="${item}" ${isChecked ? 'checked' : ''}>
                            <label for="${checkboxId}">${item}</label>
                        </div>`;
                });
            }

            // Жанры (в Edit.cshtml)
            const genreModalElement = document.getElementById('genreModal');
            const addGenreButton = document.getElementById('addGenreBtn');
            const closeGenreModalButton = document.getElementById('closeGenreModal');
            const genreListContainer = document.getElementById('genreListContainer'); // Определяем для custom

            if (addGenreButton) addGenreButton.onclick = function() {
                populateModalWithCheckboxes('genreListContainer', allGenresList, currentSelectedGenres, 'genre');
                if (genreModalElement) genreModalElement.style.display = 'block';
            }
            if (closeGenreModalButton) closeGenreModalButton.onclick = function() { if (genreModalElement) genreModalElement.style.display = 'none'; }

            // Теги (в Edit.cshtml)
            const tagModalElement = document.getElementById('tagModal');
            const addTagButton = document.getElementById('addTagBtn');
            const closeTagModalButton = document.getElementById('closeTagModal');
            const tagListContainer = document.getElementById('tagListContainer'); // Определяем для custom

            if (addTagButton) addTagButton.onclick = function() {
                populateModalWithCheckboxes('tagListContainer', allTagsList, currentSelectedTags, 'tag');
                if (tagModalElement) tagModalElement.style.display = 'block';
            }
            if (closeTagModalButton) closeTagModalButton.onclick = function() { if (tagModalElement) tagModalElement.style.display = 'none'; }

            // Сохранение жанров (в Edit.cshtml)
            const saveGenreSelectionButton = document.getElementById('saveGenreSelectionBtn');
            if (saveGenreSelectionButton) saveGenreSelectionButton.onclick = function() {
                currentSelectedGenres = [];
                document.querySelectorAll('#genreListContainer input[type="checkbox"]:checked').forEach(cb => {
                    currentSelectedGenres.push(cb.value);
                });
                if (hiddenGenresField) hiddenGenresField.value = JSON.stringify(currentSelectedGenres);
                if (genreModalElement) genreModalElement.style.display = 'none';
                renderSelectedItemsAsBadges('selectedGenresContainer', currentSelectedGenres, hiddenGenresField, 'genre', allGenresList, currentSelectedGenres);
                console.log('Selected Genres (Edit):', currentSelectedGenres);
            }

            // Сохранение тегов (в Edit.cshtml)
            const saveTagSelectionButton = document.getElementById('saveTagSelectionBtn');
            if (saveTagSelectionButton) saveTagSelectionButton.onclick = function() {
                currentSelectedTags = [];
                document.querySelectorAll('#tagListContainer input[type="checkbox"]:checked').forEach(cb => {
                    currentSelectedTags.push(cb.value);
                });
                if (hiddenTagsField) hiddenTagsField.value = JSON.stringify(currentSelectedTags);
                if (tagModalElement) tagModalElement.style.display = 'none';
                renderSelectedItemsAsBadges('selectedTagsContainer', currentSelectedTags, hiddenTagsField, 'tag', allTagsList, currentSelectedTags);
                console.log('Selected Tags (Edit):', currentSelectedTags);
            }

            // --- ЛОГИКА ДОБАВЛЕНИЯ CUSTOM ЭЛЕМЕНТОВ (Edit.cshtml) ---
            const addCustomGenreBtn = document.getElementById('addCustomGenreBtn');
            const customGenreInput = document.getElementById('customGenreInput');

            if (addCustomGenreBtn) addCustomGenreBtn.onclick = function() {
                const newGenre = customGenreInput.value.trim();
                if (newGenre && !allGenresList.includes(newGenre)) {
                    allGenresList.push(newGenre);
                }
                if (newGenre && !currentSelectedGenres.includes(newGenre)) {
                     currentSelectedGenres.push(newGenre);
                }
                populateModalWithCheckboxes('genreListContainer', allGenresList, currentSelectedGenres, 'genre');
                if(customGenreInput) customGenreInput.value = '';
            };

            const addCustomTagBtn = document.getElementById('addCustomTagBtn');
            const customTagInput = document.getElementById('customTagInput');

            if (addCustomTagBtn) addCustomTagBtn.onclick = function() {
                const newTag = customTagInput.value.trim();
                if (newTag && !allTagsList.includes(newTag)) {
                    allTagsList.push(newTag);
                }
                if (newTag && !currentSelectedTags.includes(newTag)) {
                    currentSelectedTags.push(newTag);
                }
                populateModalWithCheckboxes('tagListContainer', allTagsList, currentSelectedTags, 'tag');
                if(customTagInput) customTagInput.value = '';
            };
            // --- КОНЕЦ ЛОГИКИ CUSTOM ЭЛЕМЕНТОВ ---

            // Закрытие модалки по клику вне контента
            window.onclick = function(event) {
                if (event.target == genreModalElement) {
                    if (genreModalElement) genreModalElement.style.display = 'none';
                }
                if (event.target == tagModalElement) {
                    if (tagModalElement) tagModalElement.style.display = 'none';
                }
            }
        });
    </script>
}
</body>
</html>
