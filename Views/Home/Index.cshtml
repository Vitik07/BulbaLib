@{
    ViewData["Title"] = "BulbaLib";
    Layout = null;
}
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8" />
    <title>BulbaLib</title>
    <link rel="stylesheet" href="~/css/Index.css" />
</head>
<body>
    <!-- Top nav bar -->
    <div class="main-nav">
        <div class="logo">
            <img src="/Resource/bulbalib-logo.png" alt="BulbaLib" />
            <span>BulbaLib</span>
        </div>
        <div class="nav-actions">
            <button class="nav-btn nav-catalog" onclick="location.href='/catalog'">Каталог</button>
            <button class="nav-btn nav-search" id="openSearchPanel">Поиск</button>
        </div>
        <button class="nav-profile" id="profileButton">
            <img id="profileAvatar" src="/Resource/default-avatar.jpg" alt="Avatar" />
        </button>
    </div>
    <!-- Search panel -->
    <div class="search-panel" id="searchPanel">
        <div class="search-panel-content" id="searchPanelContent">
            <input id="searchInput" type="text" placeholder="Введите название новеллы..." autocomplete="off" />
            <div class="search-results-block">
                <div class="search-section" id="recentlyReadSection">
                    <div class="search-section-title">Недавно читали</div>
                    <div class="recently-read-list" id="recentlyReadList"></div>
                </div>
                <div class="search-section">
                    <div class="search-section-title">Результаты поиска</div>
                    <div class="search-results-list" id="searchResultsList"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main content area -->
    <div class="main-content-container">
        <div class="central-block">
            <div class="main-slider" id="mainSlider"></div>
        </div>
        <div class="main-row">
            <div class="main-col main-col-left">
                <div class="section-title">Последние обновления</div>
                <div class="updates-list" id="updatesList"></div>
            </div>
            <div class="main-col main-col-right">
                <div class="section-title">Новинки</div>
                <div class="novelties-list" id="noveltiesList"></div>
            </div>
        </div>
    </div>
    <script>
        const baseUrl = window.location.origin;

        // ======= Profile (аватар и кнопка профиля) =======
        const profileAvatar = document.getElementById('profileAvatar');
        const profileButton = document.getElementById('profileButton');
        async function fillProfileButton() {
            try {
                const res = await fetch(`${baseUrl}/api/users/me`, { credentials: "include" });
                if (!res.ok) throw new Error();
                const user = await res.json();
                profileAvatar.src = `${baseUrl}/api/users/avatar`;
                profileButton.onclick = () => window.location.href = `/profile/${user.id}`;
            } catch {
                profileAvatar.src = '/Resource/default-avatar.jpg';
                profileButton.onclick = () => window.location.href = '/login';
            }
        }

        // ======= Search Panel =======
        const searchPanel = document.getElementById('searchPanel');
        const searchPanelContent = document.getElementById('searchPanelContent');
        const openSearchPanel = document.getElementById('openSearchPanel');
        const searchInput = document.getElementById('searchInput');
        const searchResultsList = document.getElementById('searchResultsList');
        const recentlyReadList = document.getElementById('recentlyReadList');

        openSearchPanel.addEventListener('click', () => {
            searchPanel.style.display = 'block';
            searchInput.focus();
            updateRecentlyRead();
        });
        searchPanel.addEventListener('mousedown', function (e) {
            if (!searchPanelContent.contains(e.target)) {
                searchPanel.style.display = 'none';
                searchInput.value = '';
                searchResultsList.innerHTML = '';
            }
        });

        // ======= Загрузка всех новелл =======
        let allNovels = [];
        async function loadAllNovels() {
            const res = await fetch(`${baseUrl}/api/novels`);
            allNovels = await res.json();
        }

        searchInput.addEventListener('input', () => {
            const term = searchInput.value.trim().toLowerCase();
            if (!term) {
                searchResultsList.innerHTML = '';
                return;
            }
            const results = allNovels.filter(n => n.title.toLowerCase().includes(term));
            searchResultsList.innerHTML = '';
            for (let novel of results.slice(0, 12)) {
                const card = document.createElement('div');
                card.className = 'search-novel-card';
                card.innerHTML = `
                                    <img src="${getCover(novel)}" alt="${novel.title}">
                                    <div class="search-novel-title" title="${novel.title}">${novel.title}</div>
                                `;
                card.onclick = () => window.location.href = `/novel/${novel.id}`;
                searchResultsList.appendChild(card);
            }
        });

        // ======= Recently Read =======
        async function updateRecentlyRead() {
            const section = document.getElementById('recentlyReadSection');
            const recentlyReadList = document.getElementById('recentlyReadList');
            section.style.display = "none";
            recentlyReadList.innerHTML = "";

            try {
                const res = await fetch(`${baseUrl}/api/users/bookmarks`, { credentials: "include" });
                if (res.status === 401 || !res.ok) {
                    section.style.display = "none";
                    recentlyReadList.innerHTML = "";
                    return;
                }
                const bookmarks = await res.json();

                // Собираем только последние закладки по новелле (одна новелла = одна закладка)
                let all = [];
                Object.entries(bookmarks).forEach(([novelId, arr]) => {
                    // .date с маленькой буквы!
                    const lastBookmark = arr.reduce((prev, curr) => (!prev || curr.date > prev.date) ? curr : prev, null);
                    if (lastBookmark) all.push({ novelId: +novelId, ...lastBookmark });
                });

                all.sort((a, b) => b.date - a.date);
                const uniqueNovels = all.slice(0, 10);

                if (!uniqueNovels.length) {
                    section.style.display = "none";
                    recentlyReadList.innerHTML = "";
                    return;
                }

                section.style.display = "";
                recentlyReadList.innerHTML = '';
                for (let b of uniqueNovels) {
                    const novel = allNovels.find(n => n.id === b.novelId);
                    if (!novel) continue;
                    const card = document.createElement('div');
                    card.className = 'recent-novel-card';
                    card.innerHTML = `
                                <img src="${getCover(novel)}" alt="${novel.title}">
                                <div class="recent-novel-title" title="${novel.title}">${novel.title}</div>
                            `;
                    card.onclick = () => window.location.href = `/novel/${novel.id}`;
                    recentlyReadList.appendChild(card);
                }
            } catch (e) {
                section.style.display = "none";
                recentlyReadList.innerHTML = "";
            }
        }

        async function updateUpdatesList() {
            const updatesList = document.getElementById('updatesList');
            updatesList.innerHTML = '';
            try {
                const res = await fetch(`${baseUrl}/api/chapters?all=1`);
                const chapters = (await res.json()).chapters || [];
                let sorted = chapters.filter(ch => ch.date && ch.date > 0)
                    .sort((a, b) => b.date - a.date || a.title.localeCompare(b.title, 'ru'));
                const uniqueNovelIds = new Set();
                const updates = [];
                for (let ch of sorted) {
                    if (!uniqueNovelIds.has(ch.novelId)) {
                        uniqueNovelIds.add(ch.novelId);
                        updates.push(ch);
                    }
                    if (updates.length >= 6) break;
                }
                for (let ch of updates) {
                    const novel = allNovels.find(n => n.id === ch.novelId);
                    if (!novel) continue;
                    const item = document.createElement('div');
                    item.className = 'update-item';
                    item.innerHTML = `
                                        <img class="update-cover" src="${getCover(novel)}" alt="${novel.title}">
                                        <div class="update-info">
                                            <div class="update-title">${novel.title}</div>
                                            <div class="update-chapter">${ch.number ? ch.number + " " : ""}${ch.title}</div>
                                            <div class="update-date">${formatRelativeTime(ch.date)}</div>
                                        </div>
                                    `;
                    item.onclick = () => window.location.href = `/novel/${novel.id}?chapter=${ch.id}`;
                    updatesList.appendChild(item);
                }
                if (updates.length === 0) {
                    updatesList.innerHTML = '<span>нет обновлений</span>';
                }
            } catch {
                updatesList.innerHTML = '<span>нет обновлений</span>';
            }
        }

        async function updateNoveltiesList() {
            const noveltiesList = document.getElementById('noveltiesList');
            noveltiesList.innerHTML = '';
            try {
                let sorted = [...allNovels]
                    .sort((a, b) => (b.date || 0) - (a.date || 0) || a.title.localeCompare(b.title, 'ru'))
                    .slice(0, 6);
                for (let novel of sorted) {
                    const card = document.createElement('div');
                    card.className = 'novelty-card';
                    card.innerHTML = `
                                <img src="${getCover(novel)}" alt="${novel.title}">
                                <div class="novelty-title" title="${novel.title}">${novel.title}</div>
                            `;
                    card.onclick = () => window.location.href = `/novel/${novel.id}`;
                    noveltiesList.appendChild(card);
                }
                if (sorted.length === 0) {
                    noveltiesList.innerHTML = '<span>нет новинок</span>';
                }
            } catch (e) {
                noveltiesList.innerHTML = '<span>нет новинок</span>';
            }
        }

        function updateMainSlider() {
            const mainSlider = document.getElementById('mainSlider');
            mainSlider.innerHTML = '';
            const novels = [...allNovels].sort((a, b) => b.date - a.date || a.title.localeCompare(b.title, 'ru')).slice(0, 7);
            for (let novel of novels) {
                const card = document.createElement('div');
                card.className = 'slider-novel-card';
                card.innerHTML = `
                                    <img src="${getCover(novel)}" alt="${novel.title}">
                                    <div class="slider-novel-title" title="${novel.title}">${novel.title}</div>
                                `;
                card.onclick = () => window.location.href = `/novel/${novel.id}`;
                mainSlider.appendChild(card);
            }
        }

        function getCover(novel) {
            if (Array.isArray(novel.covers) && novel.covers.length)
                return novel.covers[novel.covers.length - 1];
            return '/Resource/default.jpg';
        }
        function formatRelativeTime(unixDate) {
            const now = Date.now() / 1000;
            const diff = Math.floor(now - unixDate);
            if (diff < 60) return `${diff} сек. назад`;
            if (diff < 3600) return `${Math.floor(diff / 60)} мин. назад`;
            if (diff < 86400) return `${Math.floor(diff / 3600)} час${Math.floor(diff / 3600) === 1 ? '' : 'а'} назад`;
            return `${Math.floor(diff / 86400)} дн. назад`;
        }

        // ======= MAIN LOAD =======
        async function mainLoad() {
            await loadAllNovels();
            await fillProfileButton();
            await updateUpdatesList();
            await updateNoveltiesList();
            await updateMainSlider();
        }
        mainLoad();

        // ======= После логина обновлять все =======
        // если у тебя есть ajax-логин, после успешного логина вызови mainLoad()
    </script>
</body>
</html>