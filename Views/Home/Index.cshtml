@{
    ViewData["Title"] = "BulbaLib";

    Layout = null;
}
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8" />
    <title>BulbaLib</title>
    <link rel="stylesheet" href="~/css/Index.css" />
    @* Style block removed as its content was moved to wwwroot/css/Index.css *@
</head>
<body>
    <!-- Top nav bar -->
    <div class="main-nav">
        <div class="main-nav-left">
            <div class="logo-dropdown-container">
                <div class="logo">
                    <img src="favicon.ico" alt="BulbaLib" />
                    <span>BulbaLib</span>
                </div>
                @* Dropdown panel removed as Catalog and Admin Panel links are now in the profile panel *@
            </div>
        </div>
        <div class="main-nav-center">
            <input id="searchInput" type="text" placeholder="Введите название новеллы..." autocomplete="off" />
        </div>
        <div class="main-nav-right" style="position: relative;">
            <div id="userActionsContainer" class="d-flex align-items-center"></div>
            <!-- Notification Popover (hidden by default) -->
            <div class="notifications-popover" id="notificationsPopover">
                <div class="notifications-list" id="notificationsPopoverBody">
                    <p class="text-center">Загрузка уведомлений...</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Search panel -->
    <div class="search-panel" id="searchPanel">
        <div class="search-panel-content" id="searchPanelContent">
            <div class="search-results-block">
                <div class="search-section" id="recentlyReadSection">
                    <div class="search-section-title">Недавно читали</div>
                    <div class="recently-read-list" id="recentlyReadList"></div>
                </div>
                <div class="search-section">
                    <div class="search-section-title">Результаты поиска</div>
                    <div class="search-results-list" id="searchResultsList"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main content area -->
    <div class="main-content-container">
        <div class="central-block">
            <div class="section-title main-slider-title" style="display: none;">Недавнее</div>
            <div class="main-slider" id="mainSlider"></div>
        </div>
        <div class="main-row">
            <div class="main-col main-col-left">
                <div class="section-title">Последние обновления</div>
                <div class="updates-list" id="updatesList"></div>
            </div>
            <div class="main-col main-col-right">
                <div class="section-title">Новинки</div>
                <div class="novelties-list" id="noveltiesList"></div>
            </div>
        </div>
    </div>
    @Html.AntiForgeryToken()
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <!-- Profile Panel/Modal HTML (for authenticated users) -->
    <div class="profile-panel-overlay" id="profilePanelOverlay" style="display: none;"></div>
    <div class="profile-panel" id="profilePanelContainer" style="display: none;">
        <button class="profile-panel-close" id="profilePanelCloseButton" aria-label="Close profile panel">&times;</button>
        <nav class="profile-panel-nav">
            <a href="/Catalog" class="profile-panel-link">Каталог</a>
            <a href="/Admin" class="profile-panel-link" id="adminPanelLinkInPanel" style="display:none;">Админ панель</a>
        </nav>
    </div>

    <script>
        const baseUrl = window.location.origin;

        // ======= Profile, Notifications Bell, and Auth Button Logic =======
        async function setupUserActions() {
            const userActionsContainer = document.getElementById('userActionsContainer');
            userActionsContainer.innerHTML = '';
            userActionsContainer.style.display = 'flex';
            userActionsContainer.style.alignItems = 'center';

            try {
                const res = await fetch(`${baseUrl}/api/users/me`, { credentials: "include" });
                if (!res.ok) throw new Error('User not authenticated');
                const user = await res.json();

                // User is authenticated - setup notification bell, profile link, and panel toggle
                const notificationBell = document.createElement('a');
                notificationBell.className = 'nav-link notification-bell-icon';
                notificationBell.href = "#";
                notificationBell.id = "notificationBellIndex";
                notificationBell.setAttribute('role', 'button');
                notificationBell.style.marginRight = '8px';
                notificationBell.innerHTML = `
                                                                            <span>&#x1F514;</span>
                                                                            <span class="badge" id="notification-unread-count-index" style="display:none;">0</span>
                                                                        `;
                userActionsContainer.appendChild(notificationBell);

                const profileLink = document.createElement('a');
                profileLink.className = 'nav-link text-dark';
                profileLink.href = `/profile/${user.id}`;
                profileLink.style.textDecoration = 'none';
                profileLink.style.display = 'flex';
                profileLink.style.alignItems = 'center';
                profileLink.innerHTML = `
                                                                            <img src="${baseUrl}/api/users/avatar" alt="Avatar" class="rounded-circle" width="40" height="40" style="object-fit: cover; border-radius: 50%;"
                                                                                 onerror="this.onerror=null; this.src='/Resource/default-avatar.jpg';" />
                                                                            <span class="profile-login-text" style="margin-left: 4px; line-height: normal;">${user.login}</span>
                                                                        `;
                userActionsContainer.appendChild(profileLink);

                // Add Profile Panel Toggle Button (SVG with #E0E0E0 fill and 1-unit high lines)
                const panelToggleButton = document.createElement('button');
                panelToggleButton.className = 'nav-link text-dark no-underline btn btn-link';
                panelToggleButton.id = 'profilePanelToggleButton';
                panelToggleButton.setAttribute('aria-label', 'Toggle profile panel');
                panelToggleButton.style.marginLeft = '8px';
                panelToggleButton.innerHTML = `
                                                                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="#E0E0E0" class="bi bi-list-thicker" viewBox="0 0 16 16">
                                                                                <path d="M2 3h12v2H2zM2 7h12v2H2zM2 11h12v2H2z"/>
                                                                            </svg>
                                                                        `;
                userActionsContainer.appendChild(panelToggleButton);

                // Show/Hide Admin Panel link in the new panel
                const adminPanelLinkInNewPanel = document.getElementById('adminPanelLinkInPanel');
                if (adminPanelLinkInNewPanel) {
                    if (user.role === 'Admin' || user.role === 'Moderator') {
                        adminPanelLinkInNewPanel.style.display = 'block';
                    } else {
                        adminPanelLinkInNewPanel.style.display = 'none';
                    }
                }

                initializeNotificationPopover();
                initializeProfilePanel();
                updateNotificationCountForIndex();

            } catch (error) {
                // User not authenticated: Show Login and Register buttons
                userActionsContainer.innerHTML = '';

                const loginLink = document.createElement('a');
                loginLink.className = 'nav-btn';
                loginLink.href = '/Login';
                loginLink.textContent = 'Вход';
                userActionsContainer.appendChild(loginLink);

                const registerLink = document.createElement('a');
                registerLink.className = 'nav-btn';
                registerLink.href = '/Auth/Register';
                registerLink.textContent = 'Регистрация';
                registerLink.style.marginLeft = '8px';
                userActionsContainer.appendChild(registerLink);
            }
        }

        function updateNotificationCountForIndex() {
            $.get('/Notifications/GetUnreadCount', function (data) {
                var countBadge = $('#notification-unread-count-index');
                if (data.count > 0) {
                    countBadge.text(data.count).show();
                } else {
                    countBadge.hide();
                }
            });
        }

        function initializeProfilePanel() {
            const profilePanelToggleButton = document.getElementById('profilePanelToggleButton');
            const profilePanelContainer = document.getElementById('profilePanelContainer');
            const profilePanelOverlay = document.getElementById('profilePanelOverlay');
            const profilePanelCloseButton = document.getElementById('profilePanelCloseButton');

            if (profilePanelToggleButton && profilePanelContainer && profilePanelOverlay && profilePanelCloseButton) {
                profilePanelToggleButton.addEventListener('click', function () {
                    const isOpen = profilePanelContainer.classList.contains('open');
                    if (isOpen) {
                        profilePanelContainer.classList.remove('open');
                        profilePanelOverlay.style.display = 'none';
                        setTimeout(() => {
                            if (!profilePanelContainer.classList.contains('open')) {
                                profilePanelContainer.style.display = 'none';
                            }
                        }, 300);
                    } else {
                        profilePanelContainer.style.display = 'flex';
                        profilePanelOverlay.style.display = 'block';
                        void profilePanelContainer.offsetWidth;
                        profilePanelContainer.classList.add('open');
                    }
                });

                profilePanelCloseButton.addEventListener('click', function () {
                    profilePanelContainer.classList.remove('open');
                    profilePanelOverlay.style.display = 'none';
                    setTimeout(() => {
                        if (!profilePanelContainer.classList.contains('open')) {
                            profilePanelContainer.style.display = 'none';
                        }
                    }, 300);
                });

                profilePanelOverlay.addEventListener('click', function () {
                    profilePanelContainer.classList.remove('open');
                    profilePanelOverlay.style.display = 'none';
                    setTimeout(() => {
                        if (!profilePanelContainer.classList.contains('open')) {
                            profilePanelContainer.style.display = 'none';
                        }
                    }, 300);
                });
            }
        }

        // ======= Notification Popover Custom Logic =======
        function initializeNotificationPopover() {
            const bell = document.getElementById('notificationBellIndex');
            // Ensure bell exists before proceeding
            if (!bell) return;
            const popover = document.getElementById('notificationsPopover');
            const popoverBody = document.getElementById('notificationsPopoverBody');
            const container = bell.parentElement;

            bell.addEventListener('click', function (e) {
                e.preventDefault();
                if (!popover) return; // Ensure popover exists
                const isOpen = popover.classList.contains('active');
                if (isOpen) {
                    popover.classList.remove('active');
                    return;
                }
                const bellRect = bell.getBoundingClientRect();
                const containerRect = container.getBoundingClientRect();
                popover.style.right = (containerRect.right - bellRect.right) + "px";
                popover.classList.add('active');
                if (popoverBody) { // Ensure popoverBody exists
                    popoverBody.innerHTML = '<p class="text-center">Загрузка уведомлений...</p>';
                    $(popoverBody).load('/Notifications/GetNotificationsModal', function (response, status, xhr) {
                        if (status == "error") {
                            popoverBody.innerHTML = '<p class="text-center text-danger">Не удалось загрузить уведомления.</p>';
                        }
                        $(popoverBody).find('.modal-header, .btn-close').remove();
                    });
                }
            });

            document.addEventListener('mousedown', function (e) {
                if (popover && !popover.contains(e.target) && bell && !bell.contains(e.target)) {
                    popover.classList.remove('active');
                }
            });

            if (popoverBody) { // Ensure popoverBody exists for these event listeners
                $(popoverBody).off('click', '.mark-notification-as-read').on('click', '.mark-notification-as-read', function () {
                    var button = $(this);
                    var notificationId = button.data('notification-id');
                    var token = $('input[name="__RequestVerificationToken"]').first().val();

                    $.ajax({
                        url: '/Notifications/MarkNotificationAsRead',
                        type: 'POST',
                        data: { notificationId: notificationId },
                        headers: { "RequestVerificationToken": token },
                        success: function (response) {
                            if (response.success) {
                                button.closest('li.list-group-item').removeClass('list-group-item-primary').addClass('list-group-item-light');
                                button.remove();
                                updateNotificationCountForIndex();
                            } else {
                                alert(response.message || 'Ошибка.');
                            }
                        },
                        error: function () { alert('Ошибка сервера.'); }
                    });
                });

                $(popoverBody).off('click', 'a.notification-link').on('click', 'a.notification-link', function (e) {
                    if (popover) popover.classList.remove('active');
                });
            }
        }

        // ======= Search Panel Logic =======
        const searchPanel = document.getElementById('searchPanel');
        const searchPanelContent = document.getElementById('searchPanelContent');
        const searchInput = document.getElementById('searchInput');
        const searchResultsList = document.getElementById('searchResultsList');
        const recentlyReadList = document.getElementById('recentlyReadList');

        if (searchInput) {
            searchInput.addEventListener('focus', () => {
                if (searchPanel) searchPanel.style.display = 'block';
                updateRecentlyRead();
            });

            searchInput.addEventListener('input', () => {
                const term = searchInput.value.trim().toLowerCase();
                if (!term) {
                    if (searchResultsList) searchResultsList.innerHTML = '';
                    return;
                }

                const novelScores = allNovels.map(novel => ({
                    novel: novel,
                    scores: calculateSearchScore(novel.title, term)
                }));

                let relevantNovels = novelScores.filter(item => item.scores.totalScore > 0);
                const maxTotalScore = relevantNovels.length > 0 ? Math.max(...relevantNovels.map(item => item.scores.totalScore)) : 0;
                const strongMatches = relevantNovels.filter(item => item.scores.exactMatchBonus > 0 || item.scores.startWordBonus > 0);

                let finalFilteredNovels;
                if (strongMatches.length > 0) {
                    finalFilteredNovels = strongMatches;
                } else {
                    if (maxTotalScore > 0 && relevantNovels.length > 0) {
                        finalFilteredNovels = relevantNovels.filter(item => item.scores.totalScore >= maxTotalScore * 0.40);
                    } else {
                        finalFilteredNovels = [];
                    }
                }

                const sortedNovels = finalFilteredNovels.sort((a, b) => b.scores.totalScore - a.scores.totalScore);
                if (searchResultsList) searchResultsList.innerHTML = '';

                for (let item of sortedNovels.slice(0, 12)) {
                    const novel = item.novel;
                    const card = document.createElement('div');
                    card.className = 'search-novel-card';
                    card.innerHTML = `
                                                                        <img src="${getCover(novel)}" alt="${novel.title}">
                                                                        <div class="search-novel-title" title="${novel.title}">${novel.title}</div>
                                                                    `;
                    card.onclick = () => window.location.href = `/novel/${novel.id}`;
                    if (searchResultsList) searchResultsList.appendChild(card);
                }
            });
        }

        if (searchPanel) {
            searchPanel.addEventListener('mousedown', function (e) {
                if (searchPanelContent && !searchPanelContent.contains(e.target) && e.target !== searchInput) {
                    searchPanel.style.display = 'none';
                    if (searchInput) searchInput.value = '';
                    if (searchResultsList) searchResultsList.innerHTML = '';
                }
            });
        }

        // ======= Загрузка всех новелл =======
        let allNovels = [];
        async function loadAllNovels() {
            try {
                const res = await fetch(`${baseUrl}/api/novels`);
                if (!res.ok) {
                    console.error("Failed to load all novels:", res.status);
                    allNovels = []; // Ensure allNovels is an array
                    return;
                }
                allNovels = await res.json();
                if (!Array.isArray(allNovels)) { // Ensure response is an array
                    console.error("Loaded novels is not an array:", allNovels);
                    allNovels = [];
                }
            } catch (error) {
                console.error("Error loading all novels:", error);
                allNovels = []; // Ensure allNovels is an array on error
            }
        }

        function calculateSearchScore(novelTitle, term) {
            novelTitle = novelTitle.toLowerCase();
            term = term.toLowerCase();

            let scores = { totalScore: 0, exactMatchBonus: 0, startWordBonus: 0, sequentialBonus: 0, charCountBonus: 0 };
            const idx = novelTitle.indexOf(term);
            if (idx !== -1) scores.exactMatchBonus = 10000 / (1 + idx);

            const words = novelTitle.split(/[\s-_]+/);
            for (const word of words) if (word.startsWith(term)) scores.startWordBonus += 5000;

            let maxSequentialScore = 0;
            if (term.length > 0) {
                for (let i = 0; i < novelTitle.length; i++) {
                    let currentSequentialScore = 0;
                    let termCharIndex = 0;
                    let continuityBonus = 1.0;
                    for (let j = i; j < novelTitle.length && termCharIndex < term.length; j++) {
                        if (novelTitle[j] === term[termCharIndex]) {
                            currentSequentialScore += ((100 + (termCharIndex * 50)) / (1 + j)) * continuityBonus;
                            continuityBonus *= 1.5;
                            termCharIndex++;
                        }
                    }
                    if (termCharIndex > 0) maxSequentialScore = Math.max(maxSequentialScore, currentSequentialScore);
                }
            }
            scores.sequentialBonus = maxSequentialScore;

            const uniqueTermChars = new Set(term.split(''));
            let foundCharsBonus = 0;
            if (term.length > 0) {
                for (const char of uniqueTermChars) {
                    if (char === '') continue;
                    let occurrences = 0;
                    for (let k = 0; k < novelTitle.length; k++) if (novelTitle[k] === char) occurrences++;
                    foundCharsBonus += occurrences * 3;
                }
            }
            scores.charCountBonus = foundCharsBonus;
            scores.totalScore = scores.exactMatchBonus + scores.startWordBonus + scores.sequentialBonus + scores.charCountBonus;
            return scores;
        }

        async function updateRecentlyRead() {
            const section = document.getElementById('recentlyReadSection');
            const list = document.getElementById('recentlyReadList');
            if (!section || !list) return;

            section.style.display = "none";
            list.innerHTML = "";

            try {
                const res = await fetch(`${baseUrl}/api/users/bookmarks`, { credentials: "include" });
                if (res.status === 401 || !res.ok) return;
                const bookmarks = await res.json();

                let all = [];
                Object.entries(bookmarks).forEach(([novelId, arr]) => {
                    const lastBookmark = arr.reduce((prev, curr) => (!prev || curr.date > prev.date) ? curr : prev, null);
                    if (lastBookmark) all.push({ novelId: +novelId, ...lastBookmark });
                });

                all.sort((a, b) => b.date - a.date);
                const uniqueNovels = all.slice(0, 10);

                if (!uniqueNovels.length) return;

                section.style.display = "";
                list.innerHTML = '';
                for (let b of uniqueNovels) {
                    const novel = allNovels.find(n => n.id === b.novelId);
                    if (!novel) continue;
                    const card = document.createElement('div');
                    card.className = 'recent-novel-card';
                    card.innerHTML = `
                                                                        <img src="${getCover(novel)}" alt="${novel.title}">
                                                                        <div class="recent-novel-title" title="${novel.title}">${novel.title}</div>
                                                                    `;
                    card.onclick = () => window.location.href = `/novel/${novel.id}`;
                    list.appendChild(card);
                }
            } catch (e) { /* Silently fail is okay here */ }
        }

        async function updateUpdatesList() {
            const updatesList = document.getElementById('updatesList');
            if (!updatesList) return;
            updatesList.innerHTML = '';
            try {
                const res = await fetch(`${baseUrl}/api/chapters/recentupdates?count=4`);
                if (!res.ok) throw new Error(`API request failed with status ${res.status}`);
                const updates = await res.json();

                if (!updates || updates.length === 0) {
                    updatesList.innerHTML = '<span>нет обновлений</span>';
                    return;
                }

                for (let upd of updates) {
                    const item = document.createElement('div');
                    item.className = 'update-item';
                    const coverUrl = (upd.novelCovers && upd.novelCovers.length > 0)
                        ? upd.novelCovers[upd.novelCovers.length - 1]
                        : '/Resource/default.jpg';
                    item.innerHTML = `
                                                                        <img class="update-cover" src="${coverUrl.startsWith('http') || coverUrl.startsWith('/') ? coverUrl : '/' + coverUrl}" alt="${upd.novelTitle}">
                                                                        <div class="update-info">
                                                                            <div class="update-title">${upd.novelTitle}</div>
                                                                            <div class="update-chapter">${upd.chapterNumber ? upd.chapterNumber + " " : ""}${upd.chapterTitle || 'Без названия'}</div>
                                                                            <div class="update-date">${formatRelativeTime(upd.chapterDate)}</div>
                                                                        </div>
                                                                    `;
                    item.onclick = () => window.location.href = `/novel/${upd.novelId}?chapter=${upd.chapterId}`;
                    updatesList.appendChild(item);
                }
            } catch (error) {
                console.error("Error fetching recent updates:", error);
                updatesList.innerHTML = '<span>ошибка загрузки обновлений</span>';
            }
        }

        async function updateNoveltiesList() {
            const noveltiesList = document.getElementById('noveltiesList');
            if (!noveltiesList) return;
            noveltiesList.innerHTML = '';
            try {
                if (!Array.isArray(allNovels)) { // Guard against allNovels not being an array
                    console.error("allNovels is not an array in updateNoveltiesList:", allNovels);
                    noveltiesList.innerHTML = '<span>ошибка загрузки новинок</span>';
                    return;
                }
                let sorted = [...allNovels]
                    .sort((a, b) => (b.date || 0) - (a.date || 0) || a.title.localeCompare(b.title, 'ru'))
                    .slice(0, 6);
                for (let novel of sorted) {
                    const card = document.createElement('div');
                    card.className = 'novelty-card';
                    card.innerHTML = `
                                                                        <img src="${getCover(novel)}" alt="${novel.title}">
                                                                        <div class="novelty-title" title="${novel.title}">${novel.title}</div>
                                                                    `;
                    card.onclick = () => window.location.href = `/novel/${novel.id}`;
                    noveltiesList.appendChild(card);
                }
                if (sorted.length === 0) {
                    noveltiesList.innerHTML = '<span>нет новинок</span>';
                }
            } catch (e) {
                console.error("Error updating novelties list:", e);
                noveltiesList.innerHTML = '<span>ошибка загрузки новинок</span>';
            }
        }

        async function updateMainSlider() {
            const mainSlider = document.getElementById('mainSlider');
            if (!mainSlider) return;
            const mainSliderTitle = document.querySelector('.main-slider-title');
            const centralBlock = mainSlider.closest('.central-block');

            mainSlider.innerHTML = '';

            if (mainSliderTitle) mainSliderTitle.style.display = 'none';
            if (centralBlock) centralBlock.style.display = 'none';
            mainSlider.style.display = 'none';

            let user;
            try {
                const res = await fetch(`${baseUrl}/api/users/me`, { credentials: "include" });
                if (!res.ok) return;
                user = await res.json();
            } catch (error) { return; }

            if (!user) return;

            let bookmarks;
            try {
                const res = await fetch(`${baseUrl}/api/users/bookmarks`, { credentials: "include" });
                if (!res.ok) return;
                bookmarks = await res.json();
            } catch (error) { return; }

            if (!bookmarks || Object.keys(bookmarks).length === 0) return;

            let novelsForSlider = [];
            if (bookmarks && Object.keys(bookmarks).length > 0 && Array.isArray(allNovels)) {
                Object.entries(bookmarks).forEach(([novelIdStr, bookmarkEntries]) => {
                    if (bookmarkEntries && bookmarkEntries.length > 0) {
                        const lastBookmark = bookmarkEntries.reduce((prev, curr) =>
                            (!prev || curr.date > prev.date) ? curr : prev, null);
                        if (lastBookmark) {
                            const novelId = parseInt(novelIdStr);
                            const novelDetails = allNovels.find(n => n.id === novelId);
                            if (novelDetails) {
                                novelsForSlider.push({ ...novelDetails, lastBookmarkDate: lastBookmark.date });
                            }
                        }
                    }
                });
                novelsForSlider.sort((a, b) => b.lastBookmarkDate - a.lastBookmarkDate);
            }

            if (novelsForSlider.length === 0) return;

            if (centralBlock) centralBlock.style.display = '';
            if (mainSliderTitle) mainSliderTitle.style.display = '';
            mainSlider.style.display = '';

            const novelsToDisplay = novelsForSlider.slice(0, 7);
            for (let novel of novelsToDisplay) {
                const card = document.createElement('div');
                card.className = 'slider-novel-card';
                card.innerHTML = `
                                                                    <img src="${getCover(novel)}" alt="${novel.title}">
                                                                    <div class="slider-novel-title" title="${novel.title}">${novel.title}</div>
                                                                `;
                card.onclick = () => window.location.href = `/novel/${novel.id}`;
                mainSlider.appendChild(card);
            }
        }

        function getCover(novel) {
            if (novel && Array.isArray(novel.covers) && novel.covers.length)
                return novel.covers[novel.covers.length - 1];
            return '/Resource/default.jpg';
        }
        function formatRelativeTime(unixDate) {
            const now = Date.now() / 1000;
            const diff = Math.floor(now - unixDate);
            if (diff < 60) return `${diff} сек. назад`;
            if (diff < 3600) return `${Math.floor(diff / 60)} мин. назад`;
            if (diff < 86400) return `${Math.floor(diff / 3600)} час${Math.floor(diff / 3600) === 1 ? '' : 'а'} назад`;
            return `${Math.floor(diff / 86400)} дн. назад`;
        }

        async function mainLoad() {
            await loadAllNovels();
            await setupUserActions();
            await updateUpdatesList();
            await updateNoveltiesList();
            await updateMainSlider();
        }

        mainLoad();
    </script>
</body>
</html>